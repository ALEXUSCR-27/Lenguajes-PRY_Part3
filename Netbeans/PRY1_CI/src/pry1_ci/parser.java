
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Math;
import pry1_ci.VerificadorTipos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\012\004\000\002\012\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\063\002\000\002\005\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\056\004\000\002\054\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\055\006\000\002\055\006\000\002\060\006\000\002\060" +
    "\006\000\002\011\005\000\002\011\006\000\002\010\010" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\015\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\064\002\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\013\003\000\002\014\003" +
    "\000\002\014\005\000\002\022\006\000\002\023\006\000" +
    "\002\023\006\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\004\000\002\024" +
    "\003\000\002\065\002\000\002\024\005\000\002\025\011" +
    "\000\002\025\012\000\002\066\002\000\002\025\014\000" +
    "\002\025\004\000\002\026\012\000\002\026\011\000\002" +
    "\067\002\000\002\027\006\000\002\027\007\000\002\030" +
    "\011\000\002\031\012\000\002\032\011\000\002\032\011" +
    "\000\002\032\011\000\002\032\011\000\002\044\007\000" +
    "\002\070\002\000\002\007\004\000\002\007\003\000\002" +
    "\034\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\051\003\000" +
    "\002\051\003\000\002\042\004\000\002\045\003\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\050\003\000\002\050\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\043" +
    "\005\000\002\052\003\000\002\052\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\010\016\006\020\014\021\005\001\002\000" +
    "\004\002\000\001\002\000\004\064\uff75\001\002\000\004" +
    "\064\uff74\001\002\000\004\064\u012e\001\002\000\004\002" +
    "\u012d\001\002\000\012\002\ufffd\016\006\020\014\021\005" +
    "\001\002\000\004\002\uffff\001\002\000\004\047\015\001" +
    "\002\000\004\064\uff73\001\002\000\032\016\020\017\035" +
    "\020\034\021\016\022\026\050\022\057\023\060\032\061" +
    "\027\062\017\063\025\064\031\001\002\000\004\064\uff72" +
    "\001\002\000\052\005\uff6a\025\uff6a\026\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\037\uff6a\040\uff6a" +
    "\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\050" +
    "\uff6a\053\uff6a\055\uff6a\001\002\000\004\064\uff71\001\002" +
    "\000\004\064\u012b\001\002\000\004\051\u0128\001\002\000" +
    "\052\005\uff6d\025\uff6d\026\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\033\uff6d\034\uff6d\035\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\050\uff6d\053\uff6d" +
    "\055\uff6d\001\002\000\004\050\u0124\001\002\000\052\005" +
    "\uff69\025\uff69\026\uff69\030\uff69\031\uff69\032\uff69\033\uff69" +
    "\034\uff69\035\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043" +
    "\uff69\044\uff69\045\uff69\046\uff69\050\uff69\053\uff69\055\uff69" +
    "\001\002\000\004\064\uff6e\001\002\000\052\005\uff6b\025" +
    "\uff6b\026\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\050\uff6b\053\uff6b\055\uff6b\001\002" +
    "\000\006\050\uffc8\053\u0122\001\002\000\004\050\u011e\001" +
    "\002\000\052\005\uff6c\025\uff6c\026\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\033\uff6c\034\uff6c\035\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\050\uff6c" +
    "\053\uff6c\055\uff6c\001\002\000\004\050\036\001\002\000" +
    "\004\064\uff70\001\002\000\004\064\uff6f\001\002\000\004" +
    "\051\037\001\002\000\064\003\070\006\063\010\110\011" +
    "\101\012\112\013\052\015\065\016\020\017\035\020\034" +
    "\021\016\022\026\023\066\024\055\036\071\041\064\042" +
    "\041\047\056\051\102\057\023\060\032\061\027\062\017" +
    "\063\025\064\104\001\002\000\042\005\uff77\025\uff77\026" +
    "\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77" +
    "\037\uff77\040\uff77\043\uff77\044\uff77\045\uff77\046\uff77\050" +
    "\uff77\001\002\000\056\005\uff88\025\uff88\026\uff88\030\uff88" +
    "\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\037\uff88\040" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\050\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\001\002\000" +
    "\040\025\uff76\026\uff76\027\u011a\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\037\uff76\040\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\001\002\000\012\005\uff9c\037\uff9c" +
    "\040\uff9c\050\uff9c\001\002\000\012\005\uff9e\037\212\040" +
    "\213\050\uff9e\001\002\000\012\005\uff9d\037\uff9d\040\uff9d" +
    "\050\uff9d\001\002\000\036\025\347\026\123\030\127\031" +
    "\116\032\117\033\351\034\126\035\125\037\212\040\213" +
    "\043\130\044\122\045\120\046\124\001\002\000\004\005" +
    "\u0117\001\002\000\046\005\uff7a\025\uff7a\026\uff7a\030\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\037\uff7a\040" +
    "\uff7a\041\064\042\041\043\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\050\uff7a\001\002\000\004\052\u0116\001\002\000\004\047" +
    "\370\001\002\000\004\005\367\001\002\000\004\005\366" +
    "\001\002\000\004\047\363\001\002\000\024\041\064\042" +
    "\041\047\056\057\023\060\032\061\027\062\017\063\025" +
    "\064\134\001\002\000\016\057\023\060\032\061\027\062" +
    "\017\063\025\064\344\001\002\000\022\041\064\042\041" +
    "\057\023\060\032\061\027\062\017\063\025\064\134\001" +
    "\002\000\066\003\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\036\uffc1\041\uffc1\042\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\001\002\000\004\005\341\001\002\000\004" +
    "\047\324\001\002\000\056\005\uff89\025\uff89\026\uff89\030" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\037\uff89" +
    "\040\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\001\002" +
    "\000\026\036\071\041\064\042\041\047\056\057\023\060" +
    "\032\061\027\062\017\063\025\064\321\001\002\000\004" +
    "\047\313\001\002\000\066\003\070\006\063\010\110\011" +
    "\101\012\112\013\052\015\065\016\020\017\035\020\034" +
    "\021\016\022\026\023\066\024\055\036\071\041\064\042" +
    "\041\047\056\051\102\052\ufffb\057\023\060\032\061\027" +
    "\062\017\063\025\064\104\001\002\000\052\003\uffbd\005" +
    "\305\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\036\uffbd\041\uffbd\042\uffbd\047\uffbd\052\306\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002" +
    "\000\022\041\uff8e\042\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\001\002\000\004\005\302\001\002" +
    "\000\070\003\uffc2\006\uffc2\007\276\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\036\uffc2\041\uffc2\042\uffc2\047" +
    "\uffc2\051\uffc2\052\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\001\002\000\040\005\275\025\uff78\026" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\037\uff78\040\uff78\043\uff78\044\uff78\045\uff78\046\uff78\001" +
    "\002\000\066\003\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\036\uffc0\041\uffc0\042\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\001\002\000\066\003\uffc3\006\uffc3\010\266" +
    "\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\036\uffc3\041\uffc3" +
    "\042\uffc3\047\uffc3\051\uffc3\052\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\004\005\265" +
    "\001\002\000\066\003\uffbe\006\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\036\uffbe\041\uffbe\042\uffbe\047" +
    "\uffbe\051\uffbe\052\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\001\002\000\004\047\257\001\002\000" +
    "\064\003\uffb4\006\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\036\uffb4\041\uffb4\042\uffb4\047\uffb4\051\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001" +
    "\002\000\004\005\253\001\002\000\050\025\uff79\026\uff79" +
    "\027\241\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\037\uff79\040\uff79\041\064\042\041\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\147\054\242\001\002\000\066\003" +
    "\070\006\063\010\110\011\101\012\112\013\052\015\065" +
    "\016\020\017\035\020\034\021\016\022\026\023\066\024" +
    "\055\036\071\041\064\042\041\047\056\051\102\052\ufffc" +
    "\057\023\060\032\061\027\062\017\063\025\064\104\001" +
    "\002\000\010\005\231\027\227\054\226\001\002\000\004" +
    "\005\225\001\002\000\004\047\217\001\002\000\004\005" +
    "\216\001\002\000\004\051\174\001\002\000\036\005\uff9f" +
    "\026\123\030\127\031\116\032\117\034\126\035\125\037" +
    "\uff9f\040\uff9f\043\130\044\122\045\120\046\124\050\uff9f" +
    "\001\002\000\004\005\115\001\002\000\066\003\ufff1\006" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\036" +
    "\ufff1\041\ufff1\042\ufff1\047\ufff1\051\ufff1\052\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\001\002\000" +
    "\024\041\uff82\042\uff82\047\uff82\057\uff82\060\uff82\061\uff82" +
    "\062\uff82\063\uff82\064\uff82\001\002\000\024\041\uff81\042" +
    "\uff81\047\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81" +
    "\064\uff81\001\002\000\022\041\uff93\042\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\001\002\000\014" +
    "\057\023\060\032\061\027\062\017\063\025\001\002\000" +
    "\022\041\uff94\042\uff94\057\uff94\060\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\001\002\000\024\041\uff83\042\uff83\047" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\001\002\000\022\041\uff92\042\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\001\002\000\024\041\uff7e" +
    "\042\uff7e\047\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063" +
    "\uff7e\064\uff7e\001\002\000\024\041\uff7f\042\uff7f\047\uff7f" +
    "\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001" +
    "\002\000\024\041\uff80\042\uff80\047\uff80\057\uff80\060\uff80" +
    "\061\uff80\062\uff80\063\uff80\064\uff80\001\002\000\022\041" +
    "\uff95\042\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\001\002\000\024\041\064\042\041\047\136\057" +
    "\023\060\032\061\027\062\017\063\025\064\134\001\002" +
    "\000\042\005\uff76\025\uff76\026\uff76\030\uff76\031\uff76\032" +
    "\uff76\033\uff76\034\uff76\035\uff76\037\uff76\040\uff76\043\uff76" +
    "\044\uff76\045\uff76\046\uff76\050\uff76\001\002\000\042\005" +
    "\uff78\025\uff78\026\uff78\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\037\uff78\040\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\050\uff78\001\002\000\052\005\uff79\025\uff79" +
    "\026\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\037\uff79\040\uff79\041\064\042\041\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\147\050\uff79\054\145\001\002\000" +
    "\036\005\uff85\026\123\030\127\031\116\032\117\034\126" +
    "\035\125\037\uff85\040\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\050\uff85\001\002\000\024\041\064\042\041\047\136" +
    "\057\023\060\032\061\027\062\017\063\025\064\134\001" +
    "\002\000\036\005\uff84\026\123\030\127\031\116\032\117" +
    "\034\126\035\125\037\uff84\040\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\050\uff84\001\002\000\016\026\123\030\127" +
    "\031\116\032\117\034\126\035\125\001\002\000\020\026" +
    "\123\030\127\031\116\032\117\034\126\035\125\050\142" +
    "\001\002\000\036\005\uff86\026\uff86\030\uff86\031\uff86\032" +
    "\uff86\034\uff86\035\uff86\037\uff86\040\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\050\uff86\001\002\000\022\041\064\042" +
    "\041\057\023\060\032\061\027\062\017\063\025\064\134" +
    "\001\002\000\036\005\uff87\026\uff87\030\uff87\031\uff87\032" +
    "\uff87\034\uff87\035\uff87\037\uff87\040\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\050\uff87\001\002\000\006\057\167\064" +
    "\170\001\002\000\042\005\uff8d\025\uff8d\026\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\040" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\001\002" +
    "\000\030\036\071\041\064\042\041\047\056\050\154\057" +
    "\023\060\032\061\027\062\017\063\025\064\151\001\002" +
    "\000\004\050\uffc9\001\002\000\052\025\uff79\026\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\037\uff79" +
    "\040\uff79\041\064\042\041\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\047\147\050\uffd0\053\uffcd\054\145\001\002\000\004" +
    "\050\163\001\002\000\046\025\uff7a\026\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\037\uff7a\040\uff7a" +
    "\041\064\042\041\043\uff7a\044\uff7a\045\uff7a\046\uff7a\050" +
    "\uffcf\053\160\001\002\000\044\005\uffd7\025\uffd7\026\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7" +
    "\053\uffd7\001\002\000\042\025\uff78\026\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\037\uff78\040\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\050\uffce\053\156\001" +
    "\002\000\026\036\071\041\064\042\041\047\056\057\023" +
    "\060\032\061\027\062\017\063\025\064\151\001\002\000" +
    "\004\050\uffca\001\002\000\026\036\071\041\064\042\041" +
    "\047\056\057\023\060\032\061\027\062\017\063\025\064" +
    "\151\001\002\000\042\005\uff8c\025\uff8c\026\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\050\uff8c\001\002" +
    "\000\004\050\uffcb\001\002\000\044\005\uffd6\025\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050" +
    "\uffd6\053\uffd6\001\002\000\004\053\165\001\002\000\026" +
    "\036\071\041\064\042\041\047\056\057\023\060\032\061" +
    "\027\062\017\063\025\064\151\001\002\000\004\050\uffcc" +
    "\001\002\000\004\055\172\001\002\000\004\055\171\001" +
    "\002\000\042\005\uffda\025\uffda\026\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\050\uffda\001\002\000\042" +
    "\005\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\050\uffdb\001\002\000\012\005\uff9b\037" +
    "\uff9b\040\uff9b\050\uff9b\001\002\000\066\003\uffaa\006\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\004" +
    "\052\203\001\002\000\004\052\uffa8\001\002\000\004\005" +
    "\202\001\002\000\064\003\070\006\063\010\110\011\101" +
    "\012\112\013\052\015\065\016\020\017\035\020\034\021" +
    "\016\022\026\023\066\024\055\036\071\041\064\042\041" +
    "\047\056\051\102\057\023\060\032\061\027\062\017\063" +
    "\025\064\104\001\002\000\004\052\uffa9\001\002\000\004" +
    "\052\uffa7\001\002\000\004\011\204\001\002\000\004\047" +
    "\205\001\002\000\026\036\071\041\064\042\041\047\056" +
    "\057\023\060\032\061\206\062\017\063\025\064\134\001" +
    "\002\000\044\025\uff6b\026\uff6b\030\uff6b\031\uff6b\032\uff6b" +
    "\033\uff6b\034\uff6b\035\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\050\uffa2\001\002" +
    "\000\004\050\215\001\002\000\010\037\212\040\213\050" +
    "\uffa1\001\002\000\026\036\071\041\064\042\041\047\056" +
    "\057\023\060\032\061\206\062\017\063\025\064\134\001" +
    "\002\000\026\036\uff7c\041\uff7c\042\uff7c\047\uff7c\057\uff7c" +
    "\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\001\002\000" +
    "\026\036\uff7b\041\uff7b\042\uff7b\047\uff7b\057\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002\000\004\050" +
    "\uffa0\001\002\000\004\005\uffb0\001\002\000\066\003\uffed" +
    "\006\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\036\uffed\041\uffed\042\uffed\047\uffed\051\uffed\052\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\001\002" +
    "\000\026\036\071\041\064\042\041\047\056\057\023\060" +
    "\032\061\206\062\017\063\025\064\134\001\002\000\004" +
    "\050\221\001\002\000\004\051\222\001\002\000\066\003" +
    "\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001" +
    "\002\000\004\052\224\001\002\000\070\003\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\036\uffb5\041\uffb5\042\uffb5\047\uffb5\051\uffb5\052\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002" +
    "\000\004\052\ufffa\001\002\000\014\057\023\060\032\061" +
    "\027\062\017\063\025\001\002\000\026\036\071\041\064" +
    "\042\041\047\056\057\023\060\032\061\027\062\017\063" +
    "\025\064\233\001\002\000\004\005\uffe0\001\002\000\070" +
    "\003\ufff5\005\uffe5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\036\ufff5\041\ufff5\042\ufff5\047\ufff5\051" +
    "\ufff5\052\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\001\002\000\004\005\uffe8\001\002\000\050\005" +
    "\uffe7\025\uff79\026\uff79\030\uff79\031\uff79\032\uff79\033\uff79" +
    "\034\uff79\035\uff79\037\uff79\040\uff79\041\064\042\041\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\047\147\054\145\001\002" +
    "\000\044\005\uffe9\025\uff7a\026\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\037\uff7a\040\uff7a\041\064" +
    "\042\041\043\uff7a\044\uff7a\045\uff7a\046\uff7a\001\002\000" +
    "\040\005\uffe6\025\uff78\026\uff78\030\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\035\uff78\037\uff78\040\uff78\043\uff78\044" +
    "\uff78\045\uff78\046\uff78\001\002\000\004\055\237\001\002" +
    "\000\004\005\uffdf\001\002\000\004\052\ufff9\001\002\000" +
    "\026\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\027\062\017\063\025\064\250\001\002\000\006\057" +
    "\244\064\243\001\002\000\004\055\246\001\002\000\004" +
    "\055\245\001\002\000\042\005\uffd9\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\037\uffdb\040\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\042\005\uffd8\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\001\002\000\004" +
    "\005\uffe3\001\002\000\050\005\uffe2\025\uff79\026\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\037\uff79" +
    "\040\uff79\041\064\042\041\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\047\147\054\145\001\002\000\044\005\uffe4\025\uff7a" +
    "\026\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\037\uff7a\040\uff7a\041\064\042\041\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\001\002\000\040\005\uffe1\025\uff78\026" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\037\uff78\040\uff78\043\uff78\044\uff78\045\uff78\046\uff78\001" +
    "\002\000\066\003\uffec\006\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\036\uffec\041\uffec\042\uffec\047\uffec" +
    "\051\uffec\052\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\001\002\000\064\003\070\006\063\010\110" +
    "\011\101\012\112\013\052\015\065\016\020\017\035\020" +
    "\034\021\016\022\026\023\066\024\055\036\071\041\064" +
    "\042\041\047\056\051\102\057\023\060\032\061\027\062" +
    "\017\063\025\064\104\001\002\000\004\052\256\001\002" +
    "\000\066\003\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\036\uffb3\041\uffb3\042\uffb3\047\uffb3\051" +
    "\uffb3\052\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\001\002\000\026\036\071\041\064\042\041\047" +
    "\056\057\023\060\032\061\206\062\017\063\025\064\134" +
    "\001\002\000\004\050\261\001\002\000\004\051\262\001" +
    "\002\000\066\003\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\177\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\036\uffaa\041\uffaa\042\uffaa" +
    "\047\uffaa\051\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\001\002\000\004\052\264\001\002\000\066" +
    "\003\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\036\uffb1\041\uffb1\042\uffb1\047\uffb1\051\uffb1\052" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\066\003\ufff4\006\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\036\ufff4\041\ufff4\042\ufff4\047" +
    "\ufff4\051\ufff4\052\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\004\047\267\001\002\000" +
    "\026\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\206\062\017\063\025\064\134\001\002\000\004\050" +
    "\271\001\002\000\004\051\272\001\002\000\066\003\uffaa" +
    "\006\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002" +
    "\000\004\052\274\001\002\000\070\003\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\036" +
    "\uffb6\041\uffb6\042\uffb6\047\uffb6\051\uffb6\052\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000" +
    "\066\003\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\036\uffee\041\uffee\042\uffee\047\uffee\051\uffee" +
    "\052\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\001\002\000\004\051\277\001\002\000\066\003\uffaa" +
    "\006\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002" +
    "\000\004\052\301\001\002\000\066\003\uffb2\006\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\036\uffb2\041" +
    "\uffb2\042\uffb2\047\uffb2\051\uffb2\052\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002\000\066\003" +
    "\uffef\006\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\036\uffef\041\uffef\042\uffef\047\uffef\051\uffef\052\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\001" +
    "\002\000\046\003\310\016\020\017\035\020\034\021\016" +
    "\022\026\023\066\024\055\036\071\041\064\042\041\047" +
    "\056\057\023\060\032\061\027\062\017\063\025\064\104" +
    "\001\002\000\004\005\307\001\002\000\066\003\uffeb\006" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\036" +
    "\uffeb\041\uffeb\042\uffeb\047\uffeb\051\uffeb\052\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000" +
    "\066\003\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\036\uffb7\041\uffb7\042\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\001\002\000\004\052\ufff6\001\002\000\004\005\305" +
    "\001\002\000\066\003\uffbc\006\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\036\uffbc\041\uffbc\042\uffbc\047" +
    "\uffbc\051\uffbc\052\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\001\002\000\004\052\ufff8\001\002\000" +
    "\016\057\023\060\032\061\027\062\017\063\025\064\315" +
    "\001\002\000\004\050\317\001\002\000\004\050\316\001" +
    "\002\000\004\005\uffc5\001\002\000\004\005\uffc4\001\002" +
    "\000\004\005\uffa5\001\002\000\050\005\uffa4\025\uff79\026" +
    "\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79" +
    "\037\uff79\040\uff79\041\064\042\041\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\147\054\145\001\002\000\044\005\uffa6" +
    "\025\uff7a\026\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\035\uff7a\037\uff7a\040\uff7a\041\064\042\041\043\uff7a" +
    "\044\uff7a\045\uff7a\046\uff7a\001\002\000\040\005\uffa3\025" +
    "\uff78\026\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\037\uff78\040\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\001\002\000\026\036\071\041\064\042\041\047\056" +
    "\057\023\060\032\061\206\062\017\063\025\064\134\001" +
    "\002\000\004\050\326\001\002\000\004\051\327\001\002" +
    "\000\066\003\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\177\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\036\uffaa\041\uffaa\042\uffaa\047" +
    "\uffaa\051\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\001\002\000\004\052\331\001\002\000\070\003" +
    "\uffbb\006\uffbb\007\uffb9\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\036\uffbb\041\uffbb\042\uffbb\047\uffbb\051\uffbb" +
    "\052\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\001\002\000\004\007\336\001\002\000\004\052\306" +
    "\001\002\000\004\010\266\001\002\000\066\003\uffba\006" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\036" +
    "\uffba\041\uffba\042\uffba\047\uffba\051\uffba\052\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001\002\000" +
    "\012\003\333\006\063\010\110\051\102\001\002\000\066" +
    "\003\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\036\uffb8\041\uffb8\042\uffb8\047\uffb8\051\uffb8\052" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\001\002\000\004\007\276\001\002\000\066\003\ufff0\006" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\036" +
    "\ufff0\041\ufff0\042\ufff0\047\ufff0\051\ufff0\052\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\001\002\000" +
    "\012\005\uff8f\037\uff8f\040\uff8f\050\uff8f\001\002\000\042" +
    "\005\uff8a\025\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\037\uff8a\040\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\050\uff8a\001\002\000\042\005\uff8b\025" +
    "\uff8b\026\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\037\uff8b\040\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\050\uff8b\001\002\000\010\037\212\040\213\050\356" +
    "\001\002\000\032\025\347\026\123\030\127\031\116\032" +
    "\117\033\351\034\126\035\125\043\130\044\122\045\120" +
    "\046\124\001\002\000\022\041\uff91\042\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\001\002\000\022" +
    "\041\064\042\041\057\023\060\032\061\027\062\017\063" +
    "\025\064\134\001\002\000\022\041\uff90\042\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\001\002\000" +
    "\022\041\064\042\041\057\023\060\032\061\027\062\017" +
    "\063\025\064\134\001\002\000\012\005\uff96\037\uff96\040" +
    "\uff96\050\uff96\001\002\000\012\005\uff9a\037\uff9a\040\uff9a" +
    "\050\uff9a\001\002\000\024\041\064\042\041\047\361\057" +
    "\023\060\032\061\027\062\017\063\025\064\134\001\002" +
    "\000\012\005\uff99\037\uff99\040\uff99\050\uff99\001\002\000" +
    "\012\005\uff97\037\212\040\213\050\uff97\001\002\000\026" +
    "\005\uff98\025\347\033\351\037\uff98\040\uff98\043\130\044" +
    "\122\045\120\046\124\050\uff98\001\002\000\024\041\064" +
    "\042\041\047\361\057\023\060\032\061\027\062\017\063" +
    "\025\064\134\001\002\000\016\025\347\033\351\043\130" +
    "\044\122\045\120\046\124\001\002\000\004\064\364\001" +
    "\002\000\004\050\365\001\002\000\004\005\uffc6\001\002" +
    "\000\066\003\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\036\ufff3\041\ufff3\042\ufff3\047\ufff3\051" +
    "\ufff3\052\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\001\002\000\066\003\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\036\ufff2\041\ufff2\042" +
    "\ufff2\047\ufff2\051\ufff2\052\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\001\002\000\040\016\020\017" +
    "\035\020\034\021\016\022\026\036\071\041\064\042\041" +
    "\047\056\057\023\060\032\061\371\062\017\063\025\064" +
    "\134\001\002\000\044\025\uff6b\026\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\037\uff6b\040\uff6b\041" +
    "\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\050\u0112" +
    "\001\002\000\004\050\u010e\001\002\000\004\050\u010a\001" +
    "\002\000\010\037\uff9c\040\uff9c\050\u0106\001\002\000\004" +
    "\005\u0100\001\002\000\006\005\377\027\227\001\002\000" +
    "\004\005\uffe5\001\002\000\024\041\064\042\041\047\361" +
    "\057\023\060\032\061\027\062\017\063\025\064\134\001" +
    "\002\000\010\005\u0102\037\212\040\213\001\002\000\022" +
    "\041\064\042\041\057\023\060\032\061\027\062\017\063" +
    "\025\064\u0104\001\002\000\004\050\uffab\001\002\000\006" +
    "\041\064\042\041\001\002\000\006\041\064\042\041\001" +
    "\002\000\004\051\u0107\001\002\000\066\003\uffaa\006\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000\004" +
    "\052\u0109\001\002\000\066\003\uffad\006\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\036\uffad\041\uffad\042" +
    "\uffad\047\uffad\051\uffad\052\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\001\002\000\004\051\u010b\001" +
    "\002\000\066\003\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\177\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\036\uffaa\041\uffaa\042\uffaa" +
    "\047\uffaa\051\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\001\002\000\004\052\u010d\001\002\000\066" +
    "\003\uffac\006\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\036\uffac\041\uffac\042\uffac\047\uffac\051\uffac\052" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\001\002\000\004\051\u010f\001\002\000\066\003\uffaa\006" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\177\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\036\uffaa\041\uffaa\042\uffaa\047\uffaa\051\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\001\002\000" +
    "\004\052\u0111\001\002\000\066\003\uffaf\006\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\036\uffaf\041\uffaf" +
    "\042\uffaf\047\uffaf\051\uffaf\052\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002\000\004\051\u0113" +
    "\001\002\000\066\003\uffaa\006\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\177\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\036\uffaa\041\uffaa\042" +
    "\uffaa\047\uffaa\051\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\001\002\000\004\052\u0115\001\002\000" +
    "\066\003\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\036\uffae\041\uffae\042\uffae\047\uffae\051\uffae" +
    "\052\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\001\002\000\012\002\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\001\002\000\066\003\uffbf\006\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\036\uffbf\041\uffbf\042\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\001\002\000\022\041\064\042\041\057" +
    "\023\060\032\061\027\062\017\063\025\064\134\001\002" +
    "\000\012\005\uff7d\037\uff7d\040\uff7d\050\uff7d\001\002\000" +
    "\024\041\064\042\041\047\136\057\023\060\032\061\027" +
    "\062\017\063\025\064\134\001\002\000\020\005\uffdc\026" +
    "\uff78\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\001\002" +
    "\000\024\005\uffde\026\uff7a\030\uff7a\031\uff7a\032\uff7a\034" +
    "\uff7a\035\uff7a\041\064\042\041\001\002\000\020\005\uffdd" +
    "\026\123\030\127\031\116\032\117\034\126\035\125\001" +
    "\002\000\004\051\u011f\001\002\000\064\003\070\006\063" +
    "\010\110\011\101\012\112\013\052\015\065\016\020\017" +
    "\035\020\034\021\016\022\026\023\066\024\055\036\071" +
    "\041\064\042\041\047\056\051\102\057\023\060\032\061" +
    "\027\062\017\063\025\064\104\001\002\000\004\052\u0121" +
    "\001\002\000\012\002\uffd4\016\uffd4\020\uffd4\021\uffd4\001" +
    "\002\000\014\016\020\017\035\020\034\021\016\022\026" +
    "\001\002\000\004\050\uffc7\001\002\000\004\051\u0125\001" +
    "\002\000\064\003\070\006\063\010\110\011\101\012\112" +
    "\013\052\015\065\016\020\017\035\020\034\021\016\022" +
    "\026\023\066\024\055\036\071\041\064\042\041\047\056" +
    "\051\102\057\023\060\032\061\027\062\017\063\025\064" +
    "\104\001\002\000\004\052\u0127\001\002\000\012\002\uffd2" +
    "\016\uffd2\020\uffd2\021\uffd2\001\002\000\064\003\070\006" +
    "\063\010\110\011\101\012\112\013\052\015\065\016\020" +
    "\017\035\020\034\021\016\022\026\023\066\024\055\036" +
    "\071\041\064\042\041\047\056\051\102\057\023\060\032" +
    "\061\027\062\017\063\025\064\104\001\002\000\004\052" +
    "\u012a\001\002\000\012\002\uffd5\016\uffd5\020\uffd5\021\uffd5" +
    "\001\002\000\014\005\uffea\027\uffea\050\uffea\053\uffea\054" +
    "\uffea\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\047\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\016\002\007\004\003\010\010\012\011\015" +
    "\012\062\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\010\012\u012b\015\012\062\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\023\017\027\053\032\061\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\005\050\006\106\011\073\016\104\017\105\020\076" +
    "\021\053\022\110\023\102\024\066\025\075\026\072\027" +
    "\060\030\074\031\046\032\077\035\071\036\045\037\112" +
    "\040\037\041\043\042\044\043\042\045\057\050\056\053" +
    "\047\055\041\056\052\057\113\060\061\061\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\354\001\001\000\002\001\001" +
    "\000\012\046\142\047\347\051\351\052\u0117\001\001\000" +
    "\002\001\001\000\004\050\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\132\036\345\037\140\040\037" +
    "\041\344\050\056\053\047\055\131\001\001\000\004\053" +
    "\342\001\001\000\016\011\132\036\341\040\037\050\056" +
    "\053\047\055\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\322" +
    "\035\317\036\045\037\112\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\321\055\131\001\001\000\002" +
    "\001\001\000\100\005\311\006\106\011\073\016\104\017" +
    "\105\020\076\021\053\022\110\023\102\024\066\025\075" +
    "\026\072\027\060\030\074\031\046\032\077\035\071\036" +
    "\045\037\112\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\047\055\041\056\052\057\113\060\061\061" +
    "\020\001\001\000\006\063\303\065\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\253\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\100" +
    "\005\237\006\106\011\073\016\104\017\105\020\076\021" +
    "\053\022\110\023\102\024\066\025\075\026\072\027\060" +
    "\030\074\031\046\032\077\035\071\036\045\037\112\040" +
    "\037\041\043\042\044\043\042\045\057\050\056\053\047" +
    "\055\041\056\052\057\113\060\061\061\020\001\001\000" +
    "\004\054\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\130\047" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\132\036\134\037\136" +
    "\040\037\050\056\053\047\055\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\004" +
    "\046\142\001\001\000\020\011\132\036\137\037\140\040" +
    "\037\050\056\053\047\055\131\001\001\000\004\046\130" +
    "\001\001\000\004\046\142\001\001\000\004\046\130\001" +
    "\001\000\002\001\001\000\016\011\132\036\143\040\037" +
    "\050\056\053\047\055\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\011\154\013\151" +
    "\035\147\036\045\037\112\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\152\055\131\001\001\000\002" +
    "\001\001\000\006\050\145\064\163\001\001\000\002\001" +
    "\001\000\004\050\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\154\013\156\035\147\036\045\037" +
    "\112\040\037\041\043\042\044\043\042\045\057\050\056" +
    "\053\152\055\131\001\001\000\002\001\001\000\034\011" +
    "\154\013\161\035\147\036\045\037\112\040\037\041\043" +
    "\042\044\043\042\045\057\050\056\053\152\055\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\154\013\165\035\147\036" +
    "\045\037\112\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\152\055\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\174\034\175\070" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\005\200\006\106\011\073\016\104\017" +
    "\105\020\076\021\053\022\110\023\102\024\066\025\075" +
    "\026\072\027\060\030\074\031\046\032\077\035\071\036" +
    "\045\037\112\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\047\055\041\056\052\057\113\060\061\061" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\132\033\206\035" +
    "\207\036\045\037\112\040\037\041\043\042\044\043\042" +
    "\045\057\050\056\053\047\055\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\210\001\001\000\034" +
    "\011\132\033\213\035\207\036\045\037\112\040\037\041" +
    "\043\042\044\043\042\045\057\050\056\053\047\055\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\132" +
    "\033\217\035\207\036\045\037\112\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\047\055\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\222\034" +
    "\175\070\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\235\001\001\000\032\011" +
    "\234\035\231\036\045\037\112\040\037\041\043\042\044" +
    "\043\042\045\057\050\056\053\233\055\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\004\050\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\251\035\246\036\045\037\112\040\037\041" +
    "\043\042\044\043\042\045\057\050\056\053\250\055\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\145\001\001\000\004\050\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\005\254\006\106" +
    "\011\073\016\104\017\105\020\076\021\053\022\110\023" +
    "\102\024\066\025\075\026\072\027\060\030\074\031\046" +
    "\032\077\035\071\036\045\037\112\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\047\055\041\056\052" +
    "\057\113\060\061\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\132\033\257\035\207\036\045" +
    "\037\112\040\037\041\043\042\044\043\042\045\057\050" +
    "\056\053\047\055\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\262\034\175\070\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\132\033\267\035\207\036\045\037" +
    "\112\040\037\041\043\042\044\043\042\045\057\050\056" +
    "\053\047\055\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\272\034\175\070\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\277\034\175\070\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\011" +
    "\073\016\310\017\105\020\076\021\053\022\110\023\102" +
    "\035\071\036\045\037\112\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\047\055\041\056\052\057\113" +
    "\060\061\061\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\145\001" +
    "\001\000\004\050\160\001\001\000\002\001\001\000\034" +
    "\011\132\033\324\035\207\036\045\037\112\040\037\041" +
    "\043\042\044\043\042\045\057\050\056\053\047\055\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\327\034\175\070\177\001\001\000\002\001\001\000\010" +
    "\025\333\026\334\066\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\333\026\337\027\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\354\001\001\000" +
    "\010\046\142\047\347\051\351\001\001\000\002\001\001" +
    "\000\016\011\132\036\353\040\037\050\056\053\047\055" +
    "\131\001\001\000\002\001\001\000\016\011\132\036\352" +
    "\040\037\050\056\053\047\055\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\132\036\357\040\037" +
    "\041\356\050\056\053\047\055\131\001\001\000\002\001" +
    "\001\000\004\052\354\001\001\000\006\047\347\051\351" +
    "\001\001\000\020\011\132\036\361\040\037\041\344\050" +
    "\056\053\047\055\131\001\001\000\006\047\347\051\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\011\132" +
    "\017\375\020\374\033\371\035\207\036\045\037\112\040" +
    "\037\041\043\042\044\043\373\044\372\045\057\050\056" +
    "\053\047\055\131\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\132\036\361\040\037\041\u0100\050\056\053\047\055\131" +
    "\001\001\000\004\052\354\001\001\000\010\040\u0102\050" +
    "\056\053\u0104\001\001\000\002\001\001\000\004\050\145" +
    "\001\001\000\004\050\160\001\001\000\002\001\001\000" +
    "\010\007\u0107\034\175\070\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\u010b\034" +
    "\175\070\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\u010f\034\175\070\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\u0113\034\175\070\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\132\036\u0118\040\037\050\056\053\047\055" +
    "\131\001\001\000\002\001\001\000\020\011\u011a\036\137" +
    "\037\u011c\040\037\050\056\053\u011b\055\131\001\001\000" +
    "\002\001\001\000\004\050\160\001\001\000\004\046\130" +
    "\001\001\000\002\001\001\000\100\005\u011f\006\106\011" +
    "\073\016\104\017\105\020\076\021\053\022\110\023\102" +
    "\024\066\025\075\026\072\027\060\030\074\031\046\032" +
    "\077\035\071\036\045\037\112\040\037\041\043\042\044" +
    "\043\042\045\057\050\056\053\047\055\041\056\052\057" +
    "\113\060\061\061\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0122\017\027\061\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\005\u0125\006\106" +
    "\011\073\016\104\017\105\020\076\021\053\022\110\023" +
    "\102\024\066\025\075\026\072\027\060\030\074\031\046" +
    "\032\077\035\071\036\045\037\112\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\047\055\041\056\052" +
    "\057\113\060\061\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\005\u0128\006\106\011\073\016\104" +
    "\017\105\020\076\021\053\022\110\023\102\024\066\025" +
    "\075\026\072\027\060\030\074\031\046\032\077\035\071" +
    "\036\045\037\112\040\037\041\043\042\044\043\042\045" +
    "\057\050\056\053\047\055\041\056\052\057\113\060\061" +
    "\061\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.scanner = scanner;
    }

 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }
    

    // Funcion para reportar errores sintacticos
    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        
    }

    // Funcion para reportar errores fatales
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
  
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    LexerAS scanner;
    
    
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    ArrayList<String> llamadasFunciones = new ArrayList<String>();
    VerificadorTipos verificador = new VerificadorTipos();
    String codigoBuffer;
    FileWriter escribir;
    String rutaCodigo = "src/pry1_ci/codigoIntermedio.txt";
    int t = 0;
    int l = 0;
    int param = 0;
   

    public void escribirCodigo(String cadenas) throws FileNotFoundException, IOException{
        escribir = new FileWriter(rutaCodigo, true);
        escribir.write(cadenas);
        escribir.close();
    }
    

    // Funcion para impresion de tabla de simbolos
    public void imprimirTabla() {
       
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    // Funcion para verificar si existe una variable en la funcion
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }
    

    public boolean revisarLlamadas() {
        int cont = 0;
        for (String i:llamadasFunciones) {
            for (String j:listaTablasSimbolos.keySet()) {
                String nombreLlamada = "Tabla:"+i;
                if (nombreLlamada.equals(j)) {                   
                    cont++;
                }
            }
        }
        if (cont != llamadasFunciones.size()) return false;
        else return true;    
    }
    
    public boolean existeMain() {
        for (String i:listaTablasSimbolos.keySet()) {
            if (i.equals("Tabla:main")) return true;
        }
        return false;
    }

    public boolean existeFuncion(String nombre) {
        String nombreFuncion = "Tabla:"+nombre;
        for (String i:listaTablasSimbolos.keySet()) {   
            if (nombreFuncion.equals(i)) return true;
        }
        return false;
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		
    if(!existeMain()) System.err.println("Error semantico [INEXISTENCIA DE FUNCION PRINCIPAL MAIN]");
    if (!revisarLlamadas()) {System.err.println("Error semantico -> llamadas a funciones no declaradas");}
    Thread.sleep(500);
    imprimirTabla();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= crearFuncion funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= return FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
 System.err.println("Error sintactico en la linea "+scanner.getYYLine()) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloqueCod ::= error NT$0 FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= crearArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;
		int vETleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vETright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vET = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;
		 System.err.println("Error sintactico en la linea "+scanner.getYYLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int vTVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                        escribirCodigo("data"+vTV.toString()+" "+vID.toString()+"\n");
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");}
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!existeVar(valor, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");

    else if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }

//  GENERACION DE CODIGO INTERMEDIO
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vI.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
//

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t"+t;
    t++;
    escribirCodigo(temp+" = call "+vF.toString()+","+param+"\n");
    escribirCodigo(vID.toString()+" = "+temp+"\n");
    param = 0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearAsignarVariable ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    else {
        String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());

        String tipoL = "";
        if (verificador.verificarEntero(vL)) tipoL = "int";
        if (verificador.verificarBooleano(vL)) tipoL = "bool";
        if (verificador.verificarFloat(vL)) tipoL = "float";
        if (verificador.verificarChar(vL)) tipoL = "char";
        if (verificador.verificarString(vL)) tipoL = "string";


        if (!tipo.equals(tipoL)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        }
    }
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;
		int vILleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vILright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vIL = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vIR = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeVar(vIL.toString(), listaTablasSimbolos.get(tablaActual)) && existeVar(vIR.toString(), listaTablasSimbolos.get(tablaActual))) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(vIL.toString());
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(vIR.toString());
        if(!tipo1.equals(tipo2)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = "t"+t;
    t++;
    escribirCodigo(temp+" = call "+vF.toString()+","+param+"\n");
    escribirCodigo(vID.toString()+" = "+temp+"\n");
    param = 0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // crearArreglo ::= crearVariable arreglo 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vARright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipo.equals("int") && !tipo.equals("char")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ARREGLO ILEGAL]");
    }
    String msg = vID.toString()+vAR.toString()+" = {}\n";
    escribirCodigo(msg);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo ::= LLAVESCUADABRE literal LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "["+vL.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarElementoArreglo ::= elementoArreglo EQ literal 
            {
              Object RESULT =null;
		int vELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (verificador.verificarEntero(vL)  || verificador.verificarChar(vL)) {
        String temp1 ="t"+t;
        String var1 = " = "+vL.toString()+"\n";
        escribirCodigo(temp1+var1);
        String msg = vEL.toString()+" = "+temp1+"\n";
        escribirCodigo(msg);
        t++;
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE ARREGLO ILEGAL]");
    } 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignarElementoArreglo ::= elementoArreglo EQ expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignarElementoArreglo ::= elementoArreglo EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number vE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vE.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vID2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vID2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vID2.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    llamadasFunciones.add(vID.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    RESULT = vID;
    llamadasFunciones.add(vID.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
    escribirCodigo(vID.toString()+"_end\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearFuncion ::= tipoIDFun PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // crearFuncion ::= tipoIDFun PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoIDFun ::= tipoFuncion Identificador 
            {
              Object RESULT =null;
		int vTFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeFuncion(vID.toString())) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE FUNCION]");}
    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);

    String msg = vID.toString()+":\n";
    escribirCodigo(msg);
    RESULT = vID;
    
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoIDFun",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
    RESULT = vID;
    param++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    param++;
    String temps ="t"+t;
    String vars1 = temps+" = "+vL.toString()+"\n";
    escribirCodigo(vars1);
    escribirCodigo("param "+temps+"\n");
    t++;
    RESULT = vL; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= funcion 
            {
              Object RESULT =null;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$1 ::= 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = vID; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= Identificador NT$1 COMA parametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= literal COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= funcion COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametro ::= expresion 
            {
              Object RESULT =null;
		
    
    escribirCodigo("param t"+(t-1)+"\n");
    param++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // crearParametro ::= crearVariable 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    escribirCodigo("param "+vID.toString()+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // crearParametro ::= crearVariable COMA crearParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // entradaEst ::= SYS_READ PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("int") && !tipoID.equals("float")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [*SYSREAD ERROR* VARIABLE ILEGAL (ENTERO O FLOTANTE)]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("string") && !tipoID.equals("int") && !tipoID.equals("float")) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");
    //  escribirCodigo("print t"+t);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!verificador.verificarEntero(vL) && !verificador.verificarFloat(vL) && !verificador.verificarString(vL)) 
    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");
    escribirCodigo("print t"+t);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructControl ::= do FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$2 ::= 
            {
              Object RESULT =null;
 
System.err.println("Error sintactico en la linea "+scanner.getYYLine());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructControl ::= error NT$2 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		int vConleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vConright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vCon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    escribirCodigo("if_end"+l+":\n");
    l++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$3 ::= 
            {
              Object RESULT =null;
escribirCodigo("if_end"+l+"\n");l++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA NT$3 ELSE else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if ::= error LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elif ::= ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
 escribirCodigo("else_"+(l-1)+":\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else ::= LLAVESCORCHETEABRE NT$4 bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    escribirCodigo("else_end"+(l-1)+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= elif ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for ::= FOR PARENTESISABRE expresionFor PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionFor ::= crearAsignarVariable FIN_EXPRESION expresionRelacion FIN_EXPRESION expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionFor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$5 ::= 
            {
              Object RESULT =null;
escribirCodigo("L"+l+":\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bloqueControl ::= NT$5 bloqueCod 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		escribirCodigo("L"+l+"_end\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // return ::= RETURN literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
    String tipoL = "";
    if (verificador.verificarEntero(vL)) tipoL = "int";
    if (verificador.verificarBooleano(vL)) tipoL = "bool";
    if (verificador.verificarFloat(vL)) tipoL = "float";
    if (verificador.verificarChar(vL)) tipoL = "char";
    if (verificador.verificarString(vL)) tipoL = "string";
    System.out.println(tipoL);
    if (!tipoF.equals(tipoL)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vL.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // return ::= RETURN Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    else {
        String tipoV = listaTablasSimbolos.get(tablaActual).get(vID.toString());
        String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
        if (!tipoV.equals(tipoF)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    }
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return ::= RETURN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int vBOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean vBO = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vBO.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion ::= expresion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    String temp1 = "L"+l;
    String tempActual = "t"+(t-1);
    String msg = "if "+tempActual+" goto "+temp1+"\n";
    escribirCodigo(msg);
    escribirCodigo("goto if_end"+l+"\n");
    RESULT = vEX.toString(); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion ::= expresion operadorConjuntiva condicion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEX.toString()+vOC.toString()+vC.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vER.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;
		int vENleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vENright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEN.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresionBinaria operadorRelacional literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
            
        }
        else {System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
        
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
        
        }
        else{System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    }
    else {
        if (!verificador.verificarEntero(vOPL) || !verificador.verificarBooleano(vOPL) && !verificador.verificarEntero(vOPR) || !verificador.verificarBooleano(vOPR)) { 
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            
        }
    }
    String temp1 = "t"+t;
    t++;
    escribirCodigo(temp1+" = "+op1+"\n");
    String temp2 = "t"+t;
    t++;
    escribirCodigo(temp2+" = "+op2+"\n");
    String temp3 = "t"+t;
    t++;
    escribirCodigo(temp3+" = "+temp1+vOR.toString()+temp2+"\n");
    
    RESULT = op1+vOR.toString()+op2;
    
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionRelacion ::= PARENTESISABRE expresionRelacion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionRelacion ::= expresionRelacion operadorConjuntiva operando 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
    RESULT = vER.toString()+vOC.toString()+vOP.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionRelacion ::= expresionRelacion operadorConjuntiva expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vER2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vER2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vER.toString()+vOC.toString()+vER2.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPL.toString()+vOC.toString()+vOPR.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;
		int vOPNleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOPNright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOPN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPN.toString()+vOP.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionUnaria ::= Identificador operadorUnario 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vID.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionUnaria ::= literal operadorUnario 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionUnaria ::= operadorUnario Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vID.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionUnaria ::= operadorUnario literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;
		 RESULT = "--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;
		 RESULT = "++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);
        if (tipo1.equals(tipo2)) {
            String temp1 = "t"+t;
            t++;
            escribirCodigo(temp1+" = "op1+"\n");

            String temp2 = "t"+t;
            t++;
            escribirCodigo(temp2+" = "op2+"\n");

            String temp3 = "t"+t;
            t++;
            escribirCodigo(temp3+" = "+temp1+vOB.toString()+temp2+"\n");
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
        RESULT = "0";
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(vOPR)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            }
            String temp1 = "t"+t;
            t++;
            escribirCodigo(temp1+" = "+op1+"\n");
            String temp2 = "t"+t;
            t++;
            escribirCodigo(temp2+" = "+temp1+vOB.toString()+op2+"\n");
        }
        if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(vOPR)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                }
                String temp1 = "t"+t;
                t++;
                escribirCodigo(temp1+" = "+op2+"\n");
                String temp2 = "t"+t;
                t++;
                escribirCodigo(temp2+" = "+op1+vOB.toString()+temp1+"\n");
            }

        }
        RESULT = "0";
    }

    if (verificador.verificarEntero(vOPL) && verificador.verificarEntero(vOPR)) {
        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        if (op3.equals("+")) {
     
                String temps ="t"+t;
                String vars1 = temps+" = "+op1+"\n";
                escribirCodigo(vars1);
                t++;
                String temps2 ="t"+t;
                String vars2 = temps2+" = "+op2+"\n";
                escribirCodigo(vars2);
                t++;
                String temps3 ="t"+t;
                escribirCodigo(temps3+" = "+temps+" + "+temps2+"\n");
                t++;
                RESULT = e1+e2;
        }
        if (op3.equals("-")) {
            
                String tempm1 ="t"+t;
                String varm1 = tempm1+" = "+op1+"\n";
                escribirCodigo(varm1);
                t++;
                String tempm2 ="t"+t;
                String varm2 = tempm2+" = "+op2+"\n";
                escribirCodigo(varm2);
                t++;
                String tempm3 ="t"+t;
                escribirCodigo(tempm3+" = "+tempm1+" - "+tempm2+"\n");
                t++;
                RESULT = e1-e2;
          
        }
        if (op3.equals("*")) {
          
                RESULT = e1*e2;
        }
        if (op3.equals("/")) {
                if (e2 != 0) {
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    RESULT = "0";
                }
        }
        
                
        if (op3.equals("**")) {
                RESULT = Math.pow(e1,e2);
        }
        if (op3.equals("%")){
                RESULT = e1%e2;
        }
        
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
    }
  /*      
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vOPL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vOPR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
*/
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionBinaria ::= PARENTESISABRE expresionBinaria PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionBinaria ::= expresionBinaria operadorBinario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionBinaria ::= expresionBinaria operadorBinario expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operadorBinario ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
    RESULT = vOP.toString()+vOC.toString()+vOP2.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operando ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operando ::= Identificador 
            {
              Object RESULT =null;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (existeVar(vI.toString(), listaTablasSimbolos.get(tablaActual))) RESULT = vI;
    else { 
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        RESULT = vI.toString();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operando ::= funcion 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vRes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operando ::= expresionUnaria 
            {
              Object RESULT =null;
		int vEUleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEUright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEU = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operando ::= elementoArreglo 
            {
              Object RESULT =null;
		int vEAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipoVariable ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= L_ENTERO 
            {
              Object RESULT =null;
		int l_Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_E = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;
		int l_Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_F = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_F; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int l_Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l_B = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int l_Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l_C = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int l_Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l_S = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_S; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
