
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Math;
import pry1_ci.VerificadorTipos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\012\004\000\002\012\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\063\002\000\002\005\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\056\004\000\002\054\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\055\006\000\002\055\006\000\002\060\006\000\002\060" +
    "\006\000\002\011\005\000\002\011\006\000\002\010\010" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\015\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\064\002\000\002\013\006\000\002\013" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\005" +
    "\000\002\022\006\000\002\023\006\000\002\023\006\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\004\000\002\024\003\000\002\065" +
    "\002\000\002\024\005\000\002\025\011\000\002\025\012" +
    "\000\002\025\012\000\002\025\004\000\002\026\012\000" +
    "\002\026\011\000\002\027\007\000\002\027\007\000\002" +
    "\030\011\000\002\031\012\000\002\032\011\000\002\032" +
    "\011\000\002\032\011\000\002\032\011\000\002\044\007" +
    "\000\002\007\003\000\002\007\003\000\002\034\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\033\003\000\002\033\003\000\002\033" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\051\003\000\002\051\003" +
    "\000\002\042\004\000\002\045\003\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\050\003\000\002\050\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\043\005\000\002" +
    "\052\003\000\002\052\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\010\016\006\020\014\021\005\001\002\000" +
    "\004\002\000\001\002\000\004\064\uff79\001\002\000\004" +
    "\064\uff78\001\002\000\004\064\u0129\001\002\000\004\002" +
    "\u0128\001\002\000\012\002\ufffd\016\006\020\014\021\005" +
    "\001\002\000\004\002\uffff\001\002\000\004\047\015\001" +
    "\002\000\004\064\uff77\001\002\000\032\016\020\017\035" +
    "\020\034\021\016\022\026\050\022\057\023\060\032\061" +
    "\027\062\017\063\024\064\031\001\002\000\004\064\uff76" +
    "\001\002\000\052\005\uff6e\025\uff6e\026\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\050" +
    "\uff6e\053\uff6e\055\uff6e\001\002\000\004\064\uff75\001\002" +
    "\000\004\064\u0126\001\002\000\004\051\u0123\001\002\000" +
    "\052\005\uff71\025\uff71\026\uff71\030\uff71\031\uff71\032\uff71" +
    "\033\uff71\034\uff71\035\uff71\037\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\044\uff71\045\uff71\046\uff71\050\uff71\053\uff71" +
    "\055\uff71\001\002\000\052\005\uff6d\025\uff6d\026\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046" +
    "\uff6d\050\uff6d\053\uff6d\055\uff6d\001\002\000\004\050\u011f" +
    "\001\002\000\004\064\uff72\001\002\000\052\005\uff6f\025" +
    "\uff6f\026\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f" +
    "\035\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\050\uff6f\053\uff6f\055\uff6f\001\002" +
    "\000\006\050\uffc9\053\u011d\001\002\000\004\050\u0119\001" +
    "\002\000\052\005\uff70\025\uff70\026\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\050\uff70" +
    "\053\uff70\055\uff70\001\002\000\004\050\036\001\002\000" +
    "\004\064\uff74\001\002\000\004\064\uff73\001\002\000\004" +
    "\051\037\001\002\000\062\003\070\006\063\010\107\011" +
    "\100\012\111\013\052\015\065\016\020\017\035\020\034" +
    "\021\016\022\026\023\066\024\055\036\071\041\064\042" +
    "\041\047\056\057\023\060\032\061\027\062\017\063\024" +
    "\064\103\001\002\000\042\005\uff7b\025\uff7b\026\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\037\uff7b" +
    "\040\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\050\uff7b\001" +
    "\002\000\056\005\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\040\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\050\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002\000\040\025" +
    "\uff7a\026\uff7a\027\u0115\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\037\uff7a\040\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\001\002\000\012\005\uffa0\037\uffa0\040\uffa0" +
    "\050\uffa0\001\002\000\012\005\uffa2\037\205\040\206\050" +
    "\uffa2\001\002\000\012\005\uffa1\037\uffa1\040\uffa1\050\uffa1" +
    "\001\002\000\036\025\342\026\122\030\125\031\116\032" +
    "\115\033\344\034\126\035\124\037\205\040\206\043\127" +
    "\044\121\045\117\046\123\001\002\000\046\005\uff7e\025" +
    "\uff7e\026\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\035\uff7e\037\uff7e\040\uff7e\041\064\042\041\043\uff7e\044" +
    "\uff7e\045\uff7e\046\uff7e\050\uff7e\001\002\000\004\005\u0112" +
    "\001\002\000\004\052\u0111\001\002\000\004\047\363\001" +
    "\002\000\004\005\362\001\002\000\004\005\361\001\002" +
    "\000\004\047\356\001\002\000\024\041\064\042\041\047" +
    "\056\057\023\060\032\061\027\062\017\063\024\064\133" +
    "\001\002\000\016\057\023\060\032\061\027\062\017\063" +
    "\024\064\337\001\002\000\022\041\064\042\041\057\023" +
    "\060\032\061\027\062\017\063\024\064\133\001\002\000" +
    "\064\003\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\036\uffc2\041\uffc2\042\uffc2\047\uffc2\052\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\001" +
    "\002\000\004\005\334\001\002\000\004\047\322\001\002" +
    "\000\056\005\uff8d\025\uff8d\026\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\037\uff8d\040\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\050\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\001\002\000\026\036\071" +
    "\041\064\042\041\047\056\057\023\060\032\061\027\062" +
    "\017\063\024\064\317\001\002\000\004\047\311\001\002" +
    "\000\064\003\070\006\063\010\107\011\100\012\111\013" +
    "\052\015\065\016\020\017\035\020\034\021\016\022\026" +
    "\023\066\024\055\036\071\041\064\042\041\047\056\052" +
    "\ufffb\057\023\060\032\061\027\062\017\063\024\064\103" +
    "\001\002\000\052\003\uffbe\005\303\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\036\uffbe\041\uffbe" +
    "\042\uffbe\047\uffbe\052\304\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\001\002\000\022\041\uff92\042\uff92" +
    "\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\001" +
    "\002\000\004\005\300\001\002\000\066\003\uffc3\006\uffc3" +
    "\007\274\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\036\uffc3\041\uffc3\042\uffc3\047\uffc3\052\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\040" +
    "\005\273\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\001\002\000\064\003\uffc1\006\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\036\uffc1\041" +
    "\uffc1\042\uffc1\047\uffc1\052\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\001\002\000\066\003\uffc4\006" +
    "\uffc4\007\260\010\261\011\uffc4\012\uffc4\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\036\uffc4\041\uffc4\042\uffc4\047\uffc4\052\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\001\002\000" +
    "\004\005\257\001\002\000\004\047\251\001\002\000\064" +
    "\003\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\036\uffbf\041\uffbf\042\uffbf\047\uffbf\052\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002" +
    "\000\004\005\250\001\002\000\050\025\uff7d\026\uff7d\027" +
    "\236\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d" +
    "\037\uff7d\040\uff7d\041\064\042\041\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\145\054\237\001\002\000\064\003\070" +
    "\006\063\010\107\011\100\012\111\013\052\015\065\016" +
    "\020\017\035\020\034\021\016\022\026\023\066\024\055" +
    "\036\071\041\064\042\041\047\056\052\ufffc\057\023\060" +
    "\032\061\027\062\017\063\024\064\103\001\002\000\010" +
    "\005\225\027\223\054\222\001\002\000\004\005\221\001" +
    "\002\000\004\047\213\001\002\000\004\005\212\001\002" +
    "\000\004\051\171\001\002\000\036\005\uffa3\026\122\030" +
    "\125\031\116\032\115\034\126\035\124\037\uffa3\040\uffa3" +
    "\043\127\044\121\045\117\046\123\050\uffa3\001\002\000" +
    "\004\005\114\001\002\000\064\003\ufff1\006\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\036\ufff1\041\ufff1" +
    "\042\ufff1\047\ufff1\052\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\001\002\000\024\041\uff85\042\uff85" +
    "\047\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064" +
    "\uff85\001\002\000\024\041\uff86\042\uff86\047\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\001\002\000" +
    "\022\041\uff97\042\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\001\002\000\014\057\023\060\032\061" +
    "\027\062\017\063\024\001\002\000\022\041\uff98\042\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\001" +
    "\002\000\024\041\uff87\042\uff87\047\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000\022\041" +
    "\uff96\042\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\001\002\000\024\041\uff82\042\uff82\047\uff82\057" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\001\002" +
    "\000\024\041\uff84\042\uff84\047\uff84\057\uff84\060\uff84\061" +
    "\uff84\062\uff84\063\uff84\064\uff84\001\002\000\024\041\uff83" +
    "\042\uff83\047\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063" +
    "\uff83\064\uff83\001\002\000\022\041\uff99\042\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\001\002\000" +
    "\024\041\064\042\041\047\135\057\023\060\032\061\027" +
    "\062\017\063\024\064\133\001\002\000\042\005\uff7a\025" +
    "\uff7a\026\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\037\uff7a\040\uff7a\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\050\uff7a\001\002\000\042\005\uff7c\025\uff7c\026\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\037" +
    "\uff7c\040\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\050\uff7c" +
    "\001\002\000\052\005\uff7d\025\uff7d\026\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d" +
    "\041\064\042\041\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047" +
    "\145\050\uff7d\054\144\001\002\000\036\005\uff89\026\122" +
    "\030\125\031\116\032\115\034\126\035\124\037\uff89\040" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050\uff89\001\002" +
    "\000\024\041\064\042\041\047\135\057\023\060\032\061" +
    "\027\062\017\063\024\064\133\001\002\000\036\005\uff88" +
    "\026\122\030\125\031\116\032\115\034\126\035\124\037" +
    "\uff88\040\uff88\043\uff88\044\uff88\045\uff88\046\uff88\050\uff88" +
    "\001\002\000\016\026\122\030\125\031\116\032\115\034" +
    "\126\035\124\001\002\000\020\026\122\030\125\031\116" +
    "\032\115\034\126\035\124\050\141\001\002\000\036\005" +
    "\uff8a\026\uff8a\030\uff8a\031\uff8a\032\uff8a\034\uff8a\035\uff8a" +
    "\037\uff8a\040\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\050" +
    "\uff8a\001\002\000\022\041\064\042\041\057\023\060\032" +
    "\061\027\062\017\063\024\064\133\001\002\000\036\005" +
    "\uff8b\026\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\037\uff8b\040\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\050" +
    "\uff8b\001\002\000\006\057\164\064\165\001\002\000\020" +
    "\050\150\057\023\060\032\061\027\062\017\063\024\064" +
    "\152\001\002\000\042\005\uff91\025\uff91\026\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\037\uff91\040" +
    "\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050\uff91\001\002" +
    "\000\006\050\uffce\053\162\001\002\000\044\005\uffd7\025" +
    "\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\050\uffd7\053\uffd7\001\002\000\004\050\161\001\002" +
    "\000\010\047\145\050\uffd0\053\uffcd\001\002\000\006\050" +
    "\uffcf\053\154\001\002\000\016\057\023\060\032\061\027" +
    "\062\017\063\024\064\152\001\002\000\004\050\uffcb\001" +
    "\002\000\004\053\157\001\002\000\016\057\023\060\032" +
    "\061\027\062\017\063\024\064\152\001\002\000\004\050" +
    "\uffcc\001\002\000\044\005\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6\053\uffd6" +
    "\001\002\000\016\057\023\060\032\061\027\062\017\063" +
    "\024\064\152\001\002\000\004\050\uffca\001\002\000\004" +
    "\055\167\001\002\000\004\055\166\001\002\000\042\005" +
    "\uffda\025\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\050\uffda\001\002\000\042\005\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\001\002\000\012\005\uff9f\037\uff9f\040\uff9f\050" +
    "\uff9f\001\002\000\064\003\070\006\063\010\107\011\100" +
    "\012\111\013\052\014\174\015\065\016\020\017\035\020" +
    "\034\021\016\022\026\023\066\024\055\036\071\041\064" +
    "\042\041\047\056\057\023\060\032\061\027\062\017\063" +
    "\024\064\103\001\002\000\004\052\uffad\001\002\000\004" +
    "\052\uffac\001\002\000\004\005\211\001\002\000\004\052" +
    "\176\001\002\000\004\011\177\001\002\000\004\047\200" +
    "\001\002\000\026\036\071\041\064\042\041\047\056\057" +
    "\023\060\032\061\201\062\017\063\024\064\133\001\002" +
    "\000\044\025\uff6f\026\uff6f\030\uff6f\031\uff6f\032\uff6f\033" +
    "\uff6f\034\uff6f\035\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\045\uff6f\046\uff6f\050\uffa6\001\002\000" +
    "\004\050\210\001\002\000\010\037\205\040\206\050\uffa5" +
    "\001\002\000\026\036\071\041\064\042\041\047\056\057" +
    "\023\060\032\061\201\062\017\063\024\064\133\001\002" +
    "\000\026\036\uff80\041\uff80\042\uff80\047\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\063\uff80\064\uff80\001\002\000\026" +
    "\036\uff7f\041\uff7f\042\uff7f\047\uff7f\057\uff7f\060\uff7f\061" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002\000\004\050\uffa4" +
    "\001\002\000\004\005\uffb3\001\002\000\004\052\uffab\001" +
    "\002\000\064\003\uffed\006\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\036\uffed\041\uffed\042\uffed\047\uffed" +
    "\052\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\001\002\000\026\036\071\041\064\042\041\047\056" +
    "\057\023\060\032\061\201\062\017\063\024\064\133\001" +
    "\002\000\004\050\215\001\002\000\004\051\216\001\002" +
    "\000\064\003\070\006\063\010\107\011\100\012\111\013" +
    "\052\014\174\015\065\016\020\017\035\020\034\021\016" +
    "\022\026\023\066\024\055\036\071\041\064\042\041\047" +
    "\056\057\023\060\032\061\027\062\017\063\024\064\103" +
    "\001\002\000\004\052\220\001\002\000\066\003\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\036\uffb7\041\uffb7\042\uffb7\047\uffb7\052\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000" +
    "\004\052\ufffa\001\002\000\014\057\023\060\032\061\027" +
    "\062\017\063\024\001\002\000\026\036\071\041\064\042" +
    "\041\047\056\057\023\060\032\061\027\062\017\063\024" +
    "\064\227\001\002\000\004\005\uffe0\001\002\000\066\003" +
    "\ufff5\005\uffe5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\036\ufff5\041\ufff5\042\ufff5\047\ufff5\052\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\001" +
    "\002\000\004\005\uffe8\001\002\000\050\005\uffe7\025\uff7d" +
    "\026\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035" +
    "\uff7d\037\uff7d\040\uff7d\041\064\042\041\043\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\145\054\144\001\002\000\044\005" +
    "\uffe9\025\uff7e\026\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\034\uff7e\035\uff7e\037\uff7e\040\uff7e\041\064\042\041\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\001\002\000\040\005\uffe6" +
    "\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\037\uff7c\040\uff7c\043\uff7c\044\uff7c\045\uff7c" +
    "\046\uff7c\001\002\000\042\005\uff90\025\uff90\026\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\037\uff90" +
    "\040\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050\uff90\001" +
    "\002\000\004\055\234\001\002\000\004\005\uffdf\001\002" +
    "\000\004\052\ufff9\001\002\000\026\036\071\041\064\042" +
    "\041\047\056\057\023\060\032\061\027\062\017\063\024" +
    "\064\245\001\002\000\006\057\241\064\240\001\002\000" +
    "\004\055\243\001\002\000\004\055\242\001\002\000\042" +
    "\005\uffd9\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\001\002\000\042\005\uffd8\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\001\002\000\004\005\uffe3\001\002\000\050" +
    "\005\uffe2\025\uff7d\026\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d\041\064\042\041" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\145\054\144\001" +
    "\002\000\044\005\uffe4\025\uff7e\026\uff7e\030\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\041" +
    "\064\042\041\043\uff7e\044\uff7e\045\uff7e\046\uff7e\001\002" +
    "\000\040\005\uffe1\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032" +
    "\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\001\002\000\064\003\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\036" +
    "\uffec\041\uffec\042\uffec\047\uffec\052\uffec\057\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\001\002\000\026\036" +
    "\071\041\064\042\041\047\056\057\023\060\032\061\201" +
    "\062\017\063\024\064\133\001\002\000\004\050\253\001" +
    "\002\000\004\051\254\001\002\000\064\003\070\006\063" +
    "\010\107\011\100\012\111\013\052\014\174\015\065\016" +
    "\020\017\035\020\034\021\016\022\026\023\066\024\055" +
    "\036\071\041\064\042\041\047\056\057\023\060\032\061" +
    "\027\062\017\063\024\064\103\001\002\000\004\052\256" +
    "\001\002\000\064\003\uffb4\006\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\036\uffb4\041\uffb4\042\uffb4\047" +
    "\uffb4\052\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\001\002\000\064\003\ufff4\006\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\036\ufff4\041\ufff4\042" +
    "\ufff4\047\ufff4\052\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\001\002\000\004\051\270\001\002\000" +
    "\004\047\262\001\002\000\026\036\071\041\064\042\041" +
    "\047\056\057\023\060\032\061\201\062\017\063\024\064" +
    "\133\001\002\000\004\050\264\001\002\000\004\051\265" +
    "\001\002\000\064\003\070\006\063\010\107\011\100\012" +
    "\111\013\052\014\174\015\065\016\020\017\035\020\034" +
    "\021\016\022\026\023\066\024\055\036\071\041\064\042" +
    "\041\047\056\057\023\060\032\061\027\062\017\063\024" +
    "\064\103\001\002\000\004\052\267\001\002\000\066\003" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\036\uffb8\041\uffb8\042\uffb8\047\uffb8\052\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001" +
    "\002\000\064\003\070\006\063\010\107\011\100\012\111" +
    "\013\052\014\174\015\065\016\020\017\035\020\034\021" +
    "\016\022\026\023\066\024\055\036\071\041\064\042\041" +
    "\047\056\057\023\060\032\061\027\062\017\063\024\064" +
    "\103\001\002\000\004\052\272\001\002\000\066\003\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\036\uffb6\041\uffb6\042\uffb6\047\uffb6\052\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002" +
    "\000\064\003\uffee\006\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\036\uffee\041\uffee\042\uffee\047\uffee\052" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\001\002\000\004\051\275\001\002\000\064\003\070\006" +
    "\063\010\107\011\100\012\111\013\052\014\174\015\065" +
    "\016\020\017\035\020\034\021\016\022\026\023\066\024" +
    "\055\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\027\062\017\063\024\064\103\001\002\000\004\052" +
    "\277\001\002\000\066\003\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\036\uffb5\041\uffb5" +
    "\042\uffb5\047\uffb5\052\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\001\002\000\064\003\uffef\006\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\036\uffef" +
    "\041\uffef\042\uffef\047\uffef\052\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\001\002\000\046\003\306" +
    "\016\020\017\035\020\034\021\016\022\026\023\066\024" +
    "\055\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\027\062\017\063\024\064\103\001\002\000\004\005" +
    "\305\001\002\000\064\003\uffeb\006\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\036\uffeb\041\uffeb\042\uffeb" +
    "\047\uffeb\052\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\001\002\000\066\003\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\036\uffb9" +
    "\041\uffb9\042\uffb9\047\uffb9\052\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\004\052\ufff6" +
    "\001\002\000\004\005\303\001\002\000\064\003\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\036" +
    "\uffbd\041\uffbd\042\uffbd\047\uffbd\052\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\004\052" +
    "\ufff8\001\002\000\016\057\023\060\032\061\027\062\017" +
    "\063\024\064\313\001\002\000\004\050\315\001\002\000" +
    "\004\050\314\001\002\000\004\005\uffc6\001\002\000\004" +
    "\005\uffc5\001\002\000\004\005\uffa9\001\002\000\050\005" +
    "\uffa8\025\uff7d\026\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\037\uff7d\040\uff7d\041\064\042\041\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\145\054\144\001\002" +
    "\000\044\005\uffaa\025\uff7e\026\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\041\064" +
    "\042\041\043\uff7e\044\uff7e\045\uff7e\046\uff7e\001\002\000" +
    "\040\005\uffa7\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\001\002\000\026\036\071\041\064" +
    "\042\041\047\056\057\023\060\032\061\201\062\017\063" +
    "\024\064\133\001\002\000\004\050\324\001\002\000\004" +
    "\051\325\001\002\000\064\003\070\006\063\010\107\011" +
    "\100\012\111\013\052\014\174\015\065\016\020\017\035" +
    "\020\034\021\016\022\026\023\066\024\055\036\071\041" +
    "\064\042\041\047\056\057\023\060\032\061\027\062\017" +
    "\063\024\064\103\001\002\000\004\052\327\001\002\000" +
    "\066\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\036\uffbc\041\uffbc\042\uffbc\047\uffbc" +
    "\052\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\004\052\304\001\002\000\006\007\260" +
    "\010\261\001\002\000\066\003\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\036\uffba\041" +
    "\uffba\042\uffba\047\uffba\052\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\001\002\000\066\003\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\036\uffbb\041\uffbb\042\uffbb\047\uffbb\052\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002\000" +
    "\064\003\ufff0\006\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\036\ufff0\041\ufff0\042\ufff0\047\ufff0\052\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\001" +
    "\002\000\012\005\uff93\037\uff93\040\uff93\050\uff93\001\002" +
    "\000\042\005\uff8e\025\uff8e\026\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\040\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\050\uff8e\001\002\000\042\005" +
    "\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\037\uff8f\040\uff8f\043\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\050\uff8f\001\002\000\010\037\205\040\206" +
    "\050\351\001\002\000\032\025\342\026\122\030\125\031" +
    "\116\032\115\033\344\034\126\035\124\043\127\044\121" +
    "\045\117\046\123\001\002\000\022\041\uff95\042\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\022\041\064\042\041\057\023\060\032\061\027\062" +
    "\017\063\024\064\133\001\002\000\022\041\uff94\042\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\001" +
    "\002\000\022\041\064\042\041\057\023\060\032\061\027" +
    "\062\017\063\024\064\133\001\002\000\012\005\uff9a\037" +
    "\uff9a\040\uff9a\050\uff9a\001\002\000\012\005\uff9e\037\uff9e" +
    "\040\uff9e\050\uff9e\001\002\000\024\041\064\042\041\047" +
    "\354\057\023\060\032\061\027\062\017\063\024\064\133" +
    "\001\002\000\012\005\uff9d\037\uff9d\040\uff9d\050\uff9d\001" +
    "\002\000\012\005\uff9b\037\205\040\206\050\uff9b\001\002" +
    "\000\026\005\uff9c\025\342\033\344\037\uff9c\040\uff9c\043" +
    "\127\044\121\045\117\046\123\050\uff9c\001\002\000\024" +
    "\041\064\042\041\047\354\057\023\060\032\061\027\062" +
    "\017\063\024\064\133\001\002\000\016\025\342\033\344" +
    "\043\127\044\121\045\117\046\123\001\002\000\004\064" +
    "\357\001\002\000\004\050\360\001\002\000\004\005\uffc7" +
    "\001\002\000\064\003\ufff3\006\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\036\ufff3\041\ufff3\042\ufff3\047" +
    "\ufff3\052\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\001\002\000\064\003\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\036\ufff2\041\ufff2\042" +
    "\ufff2\047\ufff2\052\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\001\002\000\040\016\020\017\035\020" +
    "\034\021\016\022\026\036\071\041\064\042\041\047\056" +
    "\057\023\060\032\061\364\062\017\063\024\064\133\001" +
    "\002\000\044\025\uff6f\026\uff6f\030\uff6f\031\uff6f\032\uff6f" +
    "\033\uff6f\034\uff6f\035\uff6f\037\uff6f\040\uff6f\041\uff6f\042" +
    "\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\050\u010d\001\002" +
    "\000\004\050\u0109\001\002\000\004\050\u0105\001\002\000" +
    "\010\037\uffa0\040\uffa0\050\u0101\001\002\000\004\005\373" +
    "\001\002\000\006\005\372\027\223\001\002\000\004\005" +
    "\uffe5\001\002\000\024\041\064\042\041\047\354\057\023" +
    "\060\032\061\027\062\017\063\024\064\133\001\002\000" +
    "\010\005\375\037\205\040\206\001\002\000\022\041\064" +
    "\042\041\057\023\060\032\061\027\062\017\063\024\064" +
    "\377\001\002\000\004\050\uffae\001\002\000\006\041\064" +
    "\042\041\001\002\000\006\041\064\042\041\001\002\000" +
    "\004\051\u0102\001\002\000\064\003\070\006\063\010\107" +
    "\011\100\012\111\013\052\014\174\015\065\016\020\017" +
    "\035\020\034\021\016\022\026\023\066\024\055\036\071" +
    "\041\064\042\041\047\056\057\023\060\032\061\027\062" +
    "\017\063\024\064\103\001\002\000\004\052\u0104\001\002" +
    "\000\064\003\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\036\uffb0\041\uffb0\042\uffb0\047\uffb0\052" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\004\051\u0106\001\002\000\064\003\070\006" +
    "\063\010\107\011\100\012\111\013\052\014\174\015\065" +
    "\016\020\017\035\020\034\021\016\022\026\023\066\024" +
    "\055\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\027\062\017\063\024\064\103\001\002\000\004\052" +
    "\u0108\001\002\000\064\003\uffaf\006\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\036\uffaf\041\uffaf\042\uffaf" +
    "\047\uffaf\052\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\001\002\000\004\051\u010a\001\002\000\064" +
    "\003\070\006\063\010\107\011\100\012\111\013\052\014" +
    "\174\015\065\016\020\017\035\020\034\021\016\022\026" +
    "\023\066\024\055\036\071\041\064\042\041\047\056\057" +
    "\023\060\032\061\027\062\017\063\024\064\103\001\002" +
    "\000\004\052\u010c\001\002\000\064\003\uffb2\006\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\036\uffb2\041" +
    "\uffb2\042\uffb2\047\uffb2\052\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\001\002\000\004\051\u010e\001" +
    "\002\000\064\003\070\006\063\010\107\011\100\012\111" +
    "\013\052\014\174\015\065\016\020\017\035\020\034\021" +
    "\016\022\026\023\066\024\055\036\071\041\064\042\041" +
    "\047\056\057\023\060\032\061\027\062\017\063\024\064" +
    "\103\001\002\000\004\052\u0110\001\002\000\064\003\uffb1" +
    "\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\036\uffb1\041\uffb1\042\uffb1\047\uffb1\052\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\012" +
    "\002\uffd3\016\uffd3\020\uffd3\021\uffd3\001\002\000\064\003" +
    "\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\036\uffc0\041\uffc0\042\uffc0\047\uffc0\052\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002\000" +
    "\022\041\064\042\041\057\023\060\032\061\027\062\017" +
    "\063\024\064\133\001\002\000\012\005\uff81\037\uff81\040" +
    "\uff81\050\uff81\001\002\000\024\041\064\042\041\047\135" +
    "\057\023\060\032\061\027\062\017\063\024\064\133\001" +
    "\002\000\020\005\uffdc\026\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\034\uff7c\035\uff7c\001\002\000\024\005\uffde\026\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\034\uff7e\035\uff7e\041\064\042\041" +
    "\001\002\000\020\005\uffdd\026\122\030\125\031\116\032" +
    "\115\034\126\035\124\001\002\000\004\051\u011a\001\002" +
    "\000\062\003\070\006\063\010\107\011\100\012\111\013" +
    "\052\015\065\016\020\017\035\020\034\021\016\022\026" +
    "\023\066\024\055\036\071\041\064\042\041\047\056\057" +
    "\023\060\032\061\027\062\017\063\024\064\103\001\002" +
    "\000\004\052\u011c\001\002\000\012\002\uffd4\016\uffd4\020" +
    "\uffd4\021\uffd4\001\002\000\014\016\020\017\035\020\034" +
    "\021\016\022\026\001\002\000\004\050\uffc8\001\002\000" +
    "\004\051\u0120\001\002\000\062\003\070\006\063\010\107" +
    "\011\100\012\111\013\052\015\065\016\020\017\035\020" +
    "\034\021\016\022\026\023\066\024\055\036\071\041\064" +
    "\042\041\047\056\057\023\060\032\061\027\062\017\063" +
    "\024\064\103\001\002\000\004\052\u0122\001\002\000\012" +
    "\002\uffd2\016\uffd2\020\uffd2\021\uffd2\001\002\000\062\003" +
    "\070\006\063\010\107\011\100\012\111\013\052\015\065" +
    "\016\020\017\035\020\034\021\016\022\026\023\066\024" +
    "\055\036\071\041\064\042\041\047\056\057\023\060\032" +
    "\061\027\062\017\063\024\064\103\001\002\000\004\052" +
    "\u0125\001\002\000\012\002\uffd5\016\uffd5\020\uffd5\021\uffd5" +
    "\001\002\000\014\005\uffea\027\uffea\050\uffea\053\uffea\054" +
    "\uffea\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\047\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\016\002\007\004\003\010\010\012\011\015" +
    "\012\062\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\010\012\u0126\015\012\062\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\024\017\027\053\032\061\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\005\050\006\105\011\073\016\103\017\104\020\076" +
    "\021\053\022\107\023\101\024\066\025\075\026\072\027" +
    "\060\030\074\031\047\032\100\035\071\036\045\037\111" +
    "\040\037\041\043\042\044\043\042\045\057\050\056\053" +
    "\046\055\041\056\052\057\112\060\061\061\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\347\001\001\000\002\001\001" +
    "\000\012\046\141\047\342\051\344\052\u0112\001\001\000" +
    "\004\050\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\131\036\340\037\137\040\037" +
    "\041\337\050\056\053\046\055\130\001\001\000\004\053" +
    "\335\001\001\000\016\011\131\036\334\040\037\050\056" +
    "\053\046\055\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\320" +
    "\035\315\036\045\037\111\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\317\055\130\001\001\000\002" +
    "\001\001\000\100\005\307\006\105\011\073\016\103\017" +
    "\104\020\076\021\053\022\107\023\101\024\066\025\075" +
    "\026\072\027\060\030\074\031\047\032\100\035\071\036" +
    "\045\037\111\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\046\055\041\056\052\057\112\060\061\061" +
    "\020\001\001\000\006\063\301\065\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\100\005\234\006\105\011\073" +
    "\016\103\017\104\020\076\021\053\022\107\023\101\024" +
    "\066\025\075\026\072\027\060\030\074\031\047\032\100" +
    "\035\071\036\045\037\111\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\046\055\041\056\052\057\112" +
    "\060\061\061\020\001\001\000\004\054\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\127\047\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\131\036\133\037\135\040\037\050\056\053\046" +
    "\055\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\004\046\141\001\001\000\020" +
    "\011\131\036\136\037\137\040\037\050\056\053\046\055" +
    "\130\001\001\000\004\046\127\001\001\000\004\046\141" +
    "\001\001\000\004\046\127\001\001\000\002\001\001\000" +
    "\016\011\131\036\142\040\037\050\056\053\046\055\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\146\013\150\053\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\155\001\001\000\002\001\001\000\010\011\146\013\154" +
    "\053\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\146\013\157\053\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\146\013\162\053\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\005\171\006\105\007\174\011\073\016\103\017\104" +
    "\020\076\021\053\022\107\023\101\024\066\025\075\026" +
    "\072\027\060\030\074\031\047\032\100\034\172\035\071" +
    "\036\045\037\111\040\037\041\043\042\044\043\042\045" +
    "\057\050\056\053\046\055\041\056\052\057\112\060\061" +
    "\061\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\131\033\201\035\202\036\045\037" +
    "\111\040\037\041\043\042\044\043\042\045\057\050\056" +
    "\053\046\055\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\203\001\001\000\034\011\131\033\206" +
    "\035\202\036\045\037\111\040\037\041\043\042\044\043" +
    "\042\045\057\050\056\053\046\055\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\131" +
    "\033\213\035\202\036\045\037\111\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\046\055\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\005\171\006" +
    "\105\007\216\011\073\016\103\017\104\020\076\021\053" +
    "\022\107\023\101\024\066\025\075\026\072\027\060\030" +
    "\074\031\047\032\100\034\172\035\071\036\045\037\111" +
    "\040\037\041\043\042\044\043\042\045\057\050\056\053" +
    "\046\055\041\056\052\057\112\060\061\061\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\232\001\001\000\032\011\230\035\225\036\045" +
    "\037\111\040\037\041\043\042\044\043\042\045\057\050" +
    "\056\053\227\055\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\004\050\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\246\035\243\036\045\037\111\040\037\041\043" +
    "\042\044\043\042\045\057\050\056\053\245\055\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\004\050\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\131\033\251\035" +
    "\202\036\045\037\111\040\037\041\043\042\044\043\042" +
    "\045\057\050\056\053\046\055\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\005\171\006\105\007\254" +
    "\011\073\016\103\017\104\020\076\021\053\022\107\023" +
    "\101\024\066\025\075\026\072\027\060\030\074\031\047" +
    "\032\100\034\172\035\071\036\045\037\111\040\037\041" +
    "\043\042\044\043\042\045\057\050\056\053\046\055\041" +
    "\056\052\057\112\060\061\061\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\131\033\262\035\202\036" +
    "\045\037\111\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\046\055\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\005\171\006\105\007\265\011\073" +
    "\016\103\017\104\020\076\021\053\022\107\023\101\024" +
    "\066\025\075\026\072\027\060\030\074\031\047\032\100" +
    "\034\172\035\071\036\045\037\111\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\046\055\041\056\052" +
    "\057\112\060\061\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\005\171\006\105\007\270\011\073" +
    "\016\103\017\104\020\076\021\053\022\107\023\101\024" +
    "\066\025\075\026\072\027\060\030\074\031\047\032\100" +
    "\034\172\035\071\036\045\037\111\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\046\055\041\056\052" +
    "\057\112\060\061\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\005\171\006\105\007\275\011\073\016\103\017\104\020" +
    "\076\021\053\022\107\023\101\024\066\025\075\026\072" +
    "\027\060\030\074\031\047\032\100\034\172\035\071\036" +
    "\045\037\111\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\046\055\041\056\052\057\112\060\061\061" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\011\073\016\306\017\104\020\076\021" +
    "\053\022\107\023\101\035\071\036\045\037\111\040\037" +
    "\041\043\042\044\043\042\045\057\050\056\053\046\055" +
    "\041\056\052\057\112\060\061\061\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\145\001\001\000\004\050\231\001\001\000" +
    "\002\001\001\000\034\011\131\033\322\035\202\036\045" +
    "\037\111\040\037\041\043\042\044\043\042\045\057\050" +
    "\056\053\046\055\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\005\171\006\105\007\325\011\073\016" +
    "\103\017\104\020\076\021\053\022\107\023\101\024\066" +
    "\025\075\026\072\027\060\030\074\031\047\032\100\034" +
    "\172\035\071\036\045\037\111\040\037\041\043\042\044" +
    "\043\042\045\057\050\056\053\046\055\041\056\052\057" +
    "\112\060\061\061\020\001\001\000\002\001\001\000\010" +
    "\025\330\026\332\027\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\347\001\001\000\010\046\141\047\342" +
    "\051\344\001\001\000\002\001\001\000\016\011\131\036" +
    "\346\040\037\050\056\053\046\055\130\001\001\000\002" +
    "\001\001\000\016\011\131\036\345\040\037\050\056\053" +
    "\046\055\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\131\036\352\040\037\041\351\050\056\053" +
    "\046\055\130\001\001\000\002\001\001\000\004\052\347" +
    "\001\001\000\006\047\342\051\344\001\001\000\020\011" +
    "\131\036\354\040\037\041\337\050\056\053\046\055\130" +
    "\001\001\000\006\047\342\051\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\011\131\017\370\020\367\033" +
    "\364\035\202\036\045\037\111\040\037\041\043\042\044" +
    "\043\366\044\365\045\057\050\056\053\046\055\130\061" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\131\036\354\040\037" +
    "\041\373\050\056\053\046\055\130\001\001\000\004\052" +
    "\347\001\001\000\010\040\375\050\056\053\377\001\001" +
    "\000\002\001\001\000\004\050\145\001\001\000\004\050" +
    "\231\001\001\000\002\001\001\000\104\005\171\006\105" +
    "\007\u0102\011\073\016\103\017\104\020\076\021\053\022" +
    "\107\023\101\024\066\025\075\026\072\027\060\030\074" +
    "\031\047\032\100\034\172\035\071\036\045\037\111\040" +
    "\037\041\043\042\044\043\042\045\057\050\056\053\046" +
    "\055\041\056\052\057\112\060\061\061\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\005\171\006\105\007\u0106\011\073\016\103\017\104\020" +
    "\076\021\053\022\107\023\101\024\066\025\075\026\072" +
    "\027\060\030\074\031\047\032\100\034\172\035\071\036" +
    "\045\037\111\040\037\041\043\042\044\043\042\045\057" +
    "\050\056\053\046\055\041\056\052\057\112\060\061\061" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\005\171\006\105\007\u010a\011\073\016" +
    "\103\017\104\020\076\021\053\022\107\023\101\024\066" +
    "\025\075\026\072\027\060\030\074\031\047\032\100\034" +
    "\172\035\071\036\045\037\111\040\037\041\043\042\044" +
    "\043\042\045\057\050\056\053\046\055\041\056\052\057" +
    "\112\060\061\061\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\005\171\006\105\007" +
    "\u010e\011\073\016\103\017\104\020\076\021\053\022\107" +
    "\023\101\024\066\025\075\026\072\027\060\030\074\031" +
    "\047\032\100\034\172\035\071\036\045\037\111\040\037" +
    "\041\043\042\044\043\042\045\057\050\056\053\046\055" +
    "\041\056\052\057\112\060\061\061\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\131\036\u0113\040\037\050\056\053\046" +
    "\055\130\001\001\000\002\001\001\000\020\011\u0115\036" +
    "\136\037\u0117\040\037\050\056\053\u0116\055\130\001\001" +
    "\000\002\001\001\000\004\050\231\001\001\000\004\046" +
    "\127\001\001\000\002\001\001\000\100\005\u011a\006\105" +
    "\011\073\016\103\017\104\020\076\021\053\022\107\023" +
    "\101\024\066\025\075\026\072\027\060\030\074\031\047" +
    "\032\100\035\071\036\045\037\111\040\037\041\043\042" +
    "\044\043\042\045\057\050\056\053\046\055\041\056\052" +
    "\057\112\060\061\061\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\u011d\017\027\061\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\005\u0120\006" +
    "\105\011\073\016\103\017\104\020\076\021\053\022\107" +
    "\023\101\024\066\025\075\026\072\027\060\030\074\031" +
    "\047\032\100\035\071\036\045\037\111\040\037\041\043" +
    "\042\044\043\042\045\057\050\056\053\046\055\041\056" +
    "\052\057\112\060\061\061\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\u0123\006\105\011\073\016" +
    "\103\017\104\020\076\021\053\022\107\023\101\024\066" +
    "\025\075\026\072\027\060\030\074\031\047\032\100\035" +
    "\071\036\045\037\111\040\037\041\043\042\044\043\042" +
    "\045\057\050\056\053\046\055\041\056\052\057\112\060" +
    "\061\061\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.scanner = scanner;
    }

 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }
    

    // Funcion para reportar errores sintacticos
    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        
    }

    // Funcion para reportar errores fatales
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
  
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    LexerAS scanner;
    
    
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    ArrayList<String> llamadasFunciones = new ArrayList<String>();
    VerificadorTipos verificador = new VerificadorTipos();
    String codigoBuffer;
    FileWriter escribir;
    String rutaCodigo = "src/pry1_ci/codigoIntermedio.txt";
    int t = 0;
    int l = 0;
   

    public void escribirCodigo(String cadenas) throws FileNotFoundException, IOException{
        escribir = new FileWriter(rutaCodigo, true);
        escribir.write(cadenas);
        escribir.close();
    }
    

    // Funcion para impresion de tabla de simbolos
    public void imprimirTabla() {
       
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    // Funcion para verificar si existe una variable en la funcion
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }
    

    public boolean revisarLlamadas() {
        int cont = 0;
        for (String i:llamadasFunciones) {
            for (String j:listaTablasSimbolos.keySet()) {
                String nombreLlamada = "Tabla:"+i;
                if (nombreLlamada.equals(j)) {                   
                    cont++;
                }
            }
        }
        if (cont != llamadasFunciones.size()) return false;
        else return true;    
    }
    
    public boolean existeMain() {
        for (String i:listaTablasSimbolos.keySet()) {
            if (i.equals("Tabla:main")) return true;
        }
        return false;
    }

    public boolean existeFuncion(String nombre) {
        String nombreFuncion = "Tabla:"+nombre;
        for (String i:listaTablasSimbolos.keySet()) {   
            if (nombreFuncion.equals(i)) return true;
        }
        return false;
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		
    if(!existeMain()) System.err.println("Error semantico [INEXISTENCIA DE FUNCION PRINCIPAL MAIN]");
    if (!revisarLlamadas()) {System.err.println("Error semantico -> llamadas a funciones no declaradas");}
    Thread.sleep(500);
    imprimirTabla();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= crearFuncion funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= return FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
 System.err.println("Error sintactico en la linea "+scanner.getYYLine()) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloqueCod ::= error NT$0 FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= crearArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;
		int vETleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vETright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vET = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;
		 System.err.println("Error sintactico en la linea "+scanner.getYYLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int vTVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");}
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!existeVar(valor, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");

    else if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }

//  GENERACION DE CODIGO INTERMEDIO
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vI.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
//

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearAsignarVariable ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    else {
        String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());

        String tipoL = "";
        if (verificador.verificarEntero(vL)) tipoL = "int";
        if (verificador.verificarBooleano(vL)) tipoL = "bool";
        if (verificador.verificarFloat(vL)) tipoL = "float";
        if (verificador.verificarChar(vL)) tipoL = "char";
        if (verificador.verificarString(vL)) tipoL = "string";


        if (!tipo.equals(tipoL)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        }
    }
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;
		int vILleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vILright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vIL = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vIR = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeVar(vIL.toString(), listaTablasSimbolos.get(tablaActual)) && existeVar(vIR.toString(), listaTablasSimbolos.get(tablaActual))) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(vIL.toString());
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(vIR.toString());
        if(!tipo1.equals(tipo2)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // crearArreglo ::= crearVariable arreglo 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vARright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipo.equals("int") && !tipo.equals("char")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ARREGLO ILEGAL]");
    }
    String msg = vID.toString()+vAR.toString()+" = {}\n";
    escribirCodigo(msg);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo ::= LLAVESCUADABRE literal LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "["+vL.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarElementoArreglo ::= elementoArreglo EQ literal 
            {
              Object RESULT =null;
		int vELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (verificador.verificarEntero(vL)  || verificador.verificarChar(vL)) {
        String temp1 ="t"+t;
        String var1 = " = "+vL.toString()+"\n";
        escribirCodigo(temp1+var1);
        String msg = vEL.toString()+" = "+temp1+"\n";
        escribirCodigo(msg);
        t++;
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE ARREGLO ILEGAL]");
    } 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignarElementoArreglo ::= elementoArreglo EQ expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignarElementoArreglo ::= elementoArreglo EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number vE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vE.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vID2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vID2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vID2.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    llamadasFunciones.add(vID.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    llamadasFunciones.add(vID.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearFuncion ::= tipoIDFun PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // crearFuncion ::= tipoIDFun PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoIDFun ::= tipoFuncion Identificador 
            {
              Object RESULT =null;
		int vTFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeFuncion(vID.toString())) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE FUNCION]");}
    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);

    String msg = vID.toString()+"_:\n";
    escribirCodigo(msg);
    
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoIDFun",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
    RESULT = vID; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= funcion 
            {
              Object RESULT =null;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$1 ::= 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = vID; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= Identificador NT$1 COMA parametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= literal COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= funcion COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // crearParametro ::= crearVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // crearParametro ::= crearVariable COMA crearParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // entradaEst ::= SYS_READ PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("int") && !tipoID.equals("float")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [*SYSREAD ERROR* VARIABLE ILEGAL (ENTERO O FLOTANTE)]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("string") && !tipoID.equals("int") && !tipoID.equals("float")) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!verificador.verificarEntero(vL) && !verificador.verificarFloat(vL) && !verificador.verificarString(vL)) 
    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructControl ::= do FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$2 ::= 
            {
              Object RESULT =null;
 
System.err.println("Error sintactico en la linea "+scanner.getYYLine());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructControl ::= error NT$2 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		int vConleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vConright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vCon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    String temp1 = "L"+l;
    l++;
    String msg = "if ("+vCon.toString()+") goto "+temp1+"\n";
    escribirCodigo(msg);
    String temp2 = "L"+l;
    l++;
    escribirCodigo("goto "+temp2+"\n");
    escribirCodigo(temp1+":\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if ::= error LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elif ::= ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else ::= if ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else ::= elif ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for ::= FOR PARENTESISABRE expresionFor PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionFor ::= crearAsignarVariable FIN_EXPRESION expresionRelacion FIN_EXPRESION expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionFor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bloqueControl ::= bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return ::= RETURN literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
    String tipoL = "";
    if (verificador.verificarEntero(vL)) tipoL = "int";
    if (verificador.verificarBooleano(vL)) tipoL = "bool";
    if (verificador.verificarFloat(vL)) tipoL = "float";
    if (verificador.verificarChar(vL)) tipoL = "char";
    if (verificador.verificarString(vL)) tipoL = "string";
    System.out.println(tipoL);
    if (!tipoF.equals(tipoL)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vL.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // return ::= RETURN Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    else {
        String tipoV = listaTablasSimbolos.get(tablaActual).get(vID.toString());
        String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
        if (!tipoV.equals(tipoF)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // return ::= RETURN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int vBOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean vBO = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vBO.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= expresion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEX.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= expresion operadorConjuntiva condicion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEX.toString()+vOC.toString()+vC.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vER.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;
		int vENleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vENright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEN.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresionBinaria operadorRelacional literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
            
        }
        else {System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
        
        }
        else{System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    }
    else {
        if(!verificador.verificarEntero(vOPL) || !verificador.verificarBooleano(vOPL) && !verificador.verificarEntero(vOPR) || !verificador.verificarBooleano(vOPR)) {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
        }
    }
    RESULT = op1+vOR.toString()+op2; 
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionRelacion ::= PARENTESISABRE expresionRelacion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionRelacion ::= expresionRelacion operadorConjuntiva operando 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
    RESULT = vER.toString()+vOC.toString()+vOP.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionRelacion ::= expresionRelacion operadorConjuntiva expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vER2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vER2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vER.toString()+vOC.toString()+vER2.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPL.toString()+vOC.toString()+vOPR.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;
		int vOPNleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOPNright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOPN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPN.toString()+vOP.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionUnaria ::= Identificador operadorUnario 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vID.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionUnaria ::= literal operadorUnario 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionUnaria ::= operadorUnario Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vID.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionUnaria ::= operadorUnario literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;
		 RESULT = "--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;
		 RESULT = "++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
   
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);

        if (!tipo1.equals(tipo2)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
        RESULT = "0";
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(vOPR)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                     
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            }
        }

        
        else if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(vOPR)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                }
            }

        }
        RESULT = "0";
    }
    else if (verificador.verificarEntero(vOPL) && verificador.verificarEntero(vOPR)) {

        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        if (op3.equals("+")) {
     
                String temps ="t"+t;
                String vars1 = temps+" = "+op1+"\n";
                escribirCodigo(vars1);
                t++;
                String temps2 ="t"+t;
                String vars2 = temps2+" = "+op2+"\n";
                escribirCodigo(vars2);
                t++;
                String temps3 ="t"+t;
                escribirCodigo(temps3+" = "+temps+" + "+temps2+"\n");
                t++;
                RESULT = e1+e2;
        }
        if (op3.equals("-")) {
            
                String tempm1 ="t"+t;
                String varm1 = tempm1+" = "+op1+"\n";
                escribirCodigo(varm1);
                t++;
                String tempm2 ="t"+t;
                String varm2 = tempm2+" = "+op2+"\n";
                escribirCodigo(varm2);
                t++;
                String tempm3 ="t"+t;
                escribirCodigo(tempm3+" = "+tempm1+" - "+tempm2+"\n");
                t++;
                RESULT = e1-e2;
          
        }
        if (op3.equals("*")) {
          
                RESULT = e1*e2;
        }
        if (op3.equals("/")) {
                if (e2 != 0) {
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    RESULT = "0";
                }
        }
        
                
        if (op3.equals("**")) {
                RESULT = Math.pow(e1,e2);
        }
        if (op3.equals("%")){
                RESULT = e1%e2;
        }
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            RESULT = "0";
        }
    }
        
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vOPL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vOPR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionBinaria ::= PARENTESISABRE expresionBinaria PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionBinaria ::= expresionBinaria operadorBinario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionBinaria ::= expresionBinaria operadorBinario expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadorBinario ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOP2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOP2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
    RESULT = vOP.toString()+vOC.toString()+vOP2.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operando ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operando ::= Identificador 
            {
              Object RESULT =null;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (existeVar(vI.toString(), listaTablasSimbolos.get(tablaActual))) RESULT = vI;
    else { 
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        RESULT = vI.toString();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operando ::= funcion 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vRes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operando ::= expresionUnaria 
            {
              Object RESULT =null;
		int vEUleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEUright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEU = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operando ::= elementoArreglo 
            {
              Object RESULT =null;
		int vEAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEA = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipoVariable ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= L_ENTERO 
            {
              Object RESULT =null;
		int l_Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_E = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;
		int l_Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_F = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_F; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int l_Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l_B = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int l_Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l_C = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int l_Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l_S = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_S; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
