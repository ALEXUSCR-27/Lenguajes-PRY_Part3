
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Math;
import pry1_ci.VerificadorTipos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\012\004\000\002\012\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\063\002\000\002\005\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\056\004\000\002\054\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\055\006\000\002\055\006\000\002\060\006\000\002\060" +
    "\006\000\002\011\005\000\002\011\006\000\002\010\010" +
    "\000\002\010\011\000\002\010\011\000\002\010\011\000" +
    "\002\064\002\000\002\010\005\000\002\015\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\065" +
    "\002\000\002\013\006\000\002\022\006\000\002\022\006" +
    "\000\002\023\006\000\002\023\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\003\000\002\066\002\000\002\024" +
    "\005\000\002\025\011\000\002\025\012\000\002\025\012" +
    "\000\002\025\004\000\002\026\012\000\002\027\007\000" +
    "\002\030\011\000\002\031\012\000\002\032\011\000\002" +
    "\032\011\000\002\032\011\000\002\032\011\000\002\044" +
    "\007\000\002\007\003\000\002\007\003\000\002\034\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\033\003\000\002\033\003\000\002" +
    "\033\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\005" +
    "\000\002\041\005\000\002\041\005\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\051\003\000\002\051\003\000\002\042\004\000\002\045" +
    "\003\000\002\040\004\000\002\040\004\000\002\050\003" +
    "\000\002\050\003\000\002\037\005\000\002\037\005\000" +
    "\002\037\007\000\002\037\007\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\043\005\000\002\052\003" +
    "\000\002\052\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\012\003\012\015\006\017\015\020\005\001" +
    "\002\000\004\002\000\001\002\000\004\063\uff82\001\002" +
    "\000\004\063\uff81\001\002\000\004\063\u010b\001\002\000" +
    "\004\002\u010a\001\002\000\014\002\ufffd\003\012\015\006" +
    "\017\015\020\005\001\002\000\004\051\uffd1\001\002\000" +
    "\004\002\uffff\001\002\000\004\046\016\001\002\000\004" +
    "\063\uff80\001\002\000\020\047\020\056\021\057\026\060" +
    "\024\061\017\062\023\063\025\001\002\000\050\004\uff77" +
    "\024\uff77\025\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\047\uff77\054\uff77\001\002\000" +
    "\004\050\u0104\001\002\000\050\004\uff7a\024\uff7a\025\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\047\uff7a\054\uff7a\001\002\000\004\047\u0100\001" +
    "\002\000\050\004\uff76\024\uff76\025\uff76\027\uff76\030\uff76" +
    "\031\uff76\032\uff76\033\uff76\034\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\047\uff76" +
    "\054\uff76\001\002\000\050\004\uff78\024\uff78\025\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\047\uff78\054\uff78\001\002\000\004\047\374\001\002" +
    "\000\050\004\uff79\024\uff79\025\uff79\027\uff79\030\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\036\uff79\037\uff79\040\uff79" +
    "\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\047\uff79\054" +
    "\uff79\001\002\000\004\047\030\001\002\000\004\050\031" +
    "\001\002\000\060\003\066\005\061\010\077\011\110\012" +
    "\047\014\063\015\056\016\037\017\101\020\045\021\104" +
    "\022\064\023\052\035\067\040\062\041\033\046\053\056" +
    "\021\057\026\060\024\061\017\062\023\063\102\001\002" +
    "\000\012\004\uffa5\036\uffa5\037\uffa5\047\uffa5\001\002\000" +
    "\026\004\uff93\036\uff93\037\uff93\047\uff93\056\uff93\057\uff93" +
    "\060\uff93\061\uff93\062\uff93\063\uff93\001\002\000\004\026" +
    "\370\001\002\000\012\004\uffa2\036\uffa2\037\uffa2\047\uffa2" +
    "\001\002\000\012\004\uffa4\036\uffa4\037\uffa4\047\uffa4\001" +
    "\002\000\004\063\uff7c\001\002\000\004\063\367\001\002" +
    "\000\012\004\uffa3\036\uffa3\037\uffa3\047\uffa3\001\002\000" +
    "\042\024\332\025\275\027\301\030\300\031\302\032\334" +
    "\033\277\034\276\036\152\037\153\040\062\041\033\042" +
    "\117\043\115\044\120\045\114\001\002\000\046\004\uff85" +
    "\024\uff85\025\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\047\uff85\001\002\000\004\004" +
    "\364\001\002\000\004\063\uff7f\001\002\000\004\051\363" +
    "\001\002\000\004\046\316\001\002\000\004\004\315\001" +
    "\002\000\004\004\314\001\002\000\004\046\307\001\002" +
    "\000\020\046\053\056\021\057\026\060\024\061\017\062" +
    "\023\063\135\001\002\000\016\056\021\057\026\060\024" +
    "\061\017\062\023\063\135\001\002\000\016\056\021\057" +
    "\026\060\024\061\017\062\023\063\135\001\002\000\004" +
    "\063\uff7e\001\002\000\062\003\uffc3\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\035\uffc3\040\uffc3\041\uffc3\046" +
    "\uffc3\051\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\001\002\000\004\004\266\001\002\000\004\046" +
    "\254\001\002\000\026\004\uff94\036\uff94\037\uff94\047\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\001" +
    "\002\000\026\035\067\040\062\041\033\046\053\056\021" +
    "\057\026\060\024\061\017\062\023\063\251\001\002\000" +
    "\004\046\243\001\002\000\062\003\066\005\061\010\077" +
    "\011\110\012\047\014\063\015\056\016\037\017\101\020" +
    "\045\021\104\022\064\023\052\035\067\040\062\041\033" +
    "\046\053\051\ufffb\056\021\057\026\060\024\061\017\062" +
    "\023\063\102\001\002\000\052\003\uffbf\004\235\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\035" +
    "\uffbf\040\uffbf\041\uffbf\046\uffbf\051\236\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000\016\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\001\002" +
    "\000\004\004\232\001\002\000\062\003\uffc4\005\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\035\uffc4\040\uffc4\041" +
    "\uffc4\046\uffc4\051\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\001\002\000\044\004\231\024\uff83\025" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\001\002\000\062\003\uffc2\005\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\035\uffc2\040\uffc2\041\uffc2" +
    "\046\uffc2\051\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\066\003\uffc5\005\uffc5\006\216" +
    "\007\217\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\035\uffc5" +
    "\040\uffc5\041\uffc5\046\uffc5\051\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\004\004\215" +
    "\001\002\000\062\003\uffc0\005\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\035\uffc0\040\uffc0\041\uffc0\046\uffc0\051" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\001\002\000\004\046\207\001\002\000\004\004\206\001" +
    "\002\000\004\063\uff7d\001\002\000\050\024\uff84\025\uff84" +
    "\026\174\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\137\053\175\001\002\000\062\003" +
    "\066\005\061\010\077\011\110\012\047\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\022\064\023\052\035" +
    "\067\040\062\041\033\046\053\051\ufffc\056\021\057\026" +
    "\060\024\061\017\062\023\063\102\001\002\000\004\063" +
    "\uff7b\001\002\000\010\004\164\026\162\053\161\001\002" +
    "\000\004\004\160\001\002\000\004\004\157\001\002\000" +
    "\004\050\122\001\002\000\022\004\uffa6\036\uffa6\037\uffa6" +
    "\042\117\043\115\044\120\045\114\047\uffa6\001\002\000" +
    "\004\004\113\001\002\000\062\003\ufff1\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\035\ufff1\040\ufff1\041\ufff1" +
    "\046\ufff1\051\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\001\002\000\016\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\001\002\000\016\056\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\001\002\000\014" +
    "\056\021\057\026\060\024\061\017\062\023\001\002\000" +
    "\016\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\001\002\000\016\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\001\002\000\012\004\uffa1\036\uffa1\037\uffa1" +
    "\047\uffa1\001\002\000\062\003\066\005\061\010\077\011" +
    "\110\012\047\013\125\014\063\015\056\016\037\017\101" +
    "\020\045\021\104\022\064\023\052\035\067\040\062\041" +
    "\033\046\053\056\021\057\026\060\024\061\017\062\023" +
    "\063\102\001\002\000\004\051\uffb0\001\002\000\004\051" +
    "\uffaf\001\002\000\004\004\156\001\002\000\004\051\127" +
    "\001\002\000\004\010\130\001\002\000\004\046\131\001" +
    "\002\000\026\035\067\040\062\041\033\046\053\056\021" +
    "\057\026\060\132\061\017\062\023\063\135\001\002\000" +
    "\044\024\uff78\025\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\047\uffa9\001\002\000\004" +
    "\047\155\001\002\000\010\036\152\037\153\047\uffa8\001" +
    "\002\000\050\004\uff84\024\uff84\025\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\137" +
    "\047\uff84\001\002\000\046\004\uff83\024\uff83\025\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\047\uff83\001\002\000\020\047\141\056\021\057\026" +
    "\060\024\061\017\062\023\063\143\001\002\000\004\047" +
    "\uffcc\001\002\000\046\004\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\047\uffd7\001\002\000\004\047\150\001\002\000\010\046" +
    "\137\047\uffce\052\uffcb\001\002\000\004\047\uffcd\001\002" +
    "\000\004\052\146\001\002\000\016\056\021\057\026\060" +
    "\024\061\017\062\023\063\143\001\002\000\004\047\uffca" +
    "\001\002\000\046\004\uffd6\024\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\001\002\000\026\035\067\040\062\041\033\046\053" +
    "\056\021\057\026\060\132\061\017\062\023\063\135\001" +
    "\002\000\026\035\uff87\040\uff87\041\uff87\046\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\001\002\000" +
    "\026\035\uff86\040\uff86\041\uff86\046\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\001\002\000\004\047" +
    "\uffa7\001\002\000\004\004\uffb6\001\002\000\004\051\uffae" +
    "\001\002\000\062\003\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\035\uffed\040\uffed\041\uffed\046\uffed\051" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed" +
    "\001\002\000\004\051\ufffa\001\002\000\014\056\021\057" +
    "\026\060\024\061\017\062\023\001\002\000\026\035\067" +
    "\040\062\041\033\046\053\056\021\057\026\060\024\061" +
    "\017\062\023\063\166\001\002\000\004\004\uffe0\001\002" +
    "\000\064\003\ufff5\004\uffe5\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\035\ufff5\040\ufff5\041\ufff5\046\ufff5\051" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\001\002\000\004\004\uffe8\001\002\000\046\004\uffe7\024" +
    "\uff84\025\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\137\001\002\000\044\004\uffe9" +
    "\024\uff85\025\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\001\002\000\044\004\uffe6\024" +
    "\uff83\025\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\001\002\000\004\054\172\001\002" +
    "\000\004\004\uffdf\001\002\000\004\051\ufff9\001\002\000" +
    "\026\035\067\040\062\041\033\046\053\056\021\057\026" +
    "\060\024\061\017\062\023\063\203\001\002\000\006\056" +
    "\177\063\176\001\002\000\004\054\201\001\002\000\004" +
    "\054\200\001\002\000\006\004\uffd9\026\uffdb\001\002\000" +
    "\006\004\uffd8\026\uffda\001\002\000\004\004\uffe3\001\002" +
    "\000\046\004\uffe2\024\uff84\025\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\137\001" +
    "\002\000\044\004\uffe4\024\uff85\025\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\001\002" +
    "\000\044\004\uffe1\024\uff83\025\uff83\027\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\034\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\001\002\000" +
    "\062\003\uffec\005\uffec\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\035\uffec\040\uffec\041\uffec\046\uffec\051\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\001\002\000" +
    "\026\035\067\040\062\041\033\046\053\056\021\057\026" +
    "\060\132\061\017\062\023\063\135\001\002\000\004\047" +
    "\211\001\002\000\004\050\212\001\002\000\062\003\066" +
    "\005\061\010\077\011\110\012\047\013\125\014\063\015" +
    "\056\016\037\017\101\020\045\021\104\022\064\023\052" +
    "\035\067\040\062\041\033\046\053\056\021\057\026\060" +
    "\024\061\017\062\023\063\102\001\002\000\004\051\214" +
    "\001\002\000\062\003\uffb7\005\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\035\uffb7\040\uffb7\041\uffb7\046\uffb7\051" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7" +
    "\001\002\000\062\003\ufff4\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\035\ufff4\040\ufff4\041\ufff4\046\ufff4\051" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\001\002\000\004\050\226\001\002\000\004\046\220\001" +
    "\002\000\026\035\067\040\062\041\033\046\053\056\021" +
    "\057\026\060\132\061\017\062\023\063\135\001\002\000" +
    "\004\047\222\001\002\000\004\050\223\001\002\000\062" +
    "\003\066\005\061\010\077\011\110\012\047\013\125\014" +
    "\063\015\056\016\037\017\101\020\045\021\104\022\064" +
    "\023\052\035\067\040\062\041\033\046\053\056\021\057" +
    "\026\060\024\061\017\062\023\063\102\001\002\000\004" +
    "\051\225\001\002\000\066\003\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\035\uffb9\040" +
    "\uffb9\041\uffb9\046\uffb9\051\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\001\002\000\062\003\066\005" +
    "\061\010\077\011\110\012\047\013\125\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\022\064\023\052\035" +
    "\067\040\062\041\033\046\053\056\021\057\026\060\024" +
    "\061\017\062\023\063\102\001\002\000\004\051\230\001" +
    "\002\000\066\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\035\uffb8\040\uffb8\041\uffb8" +
    "\046\uffb8\051\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\001\002\000\062\003\uffee\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\035\uffee\040\uffee\041\uffee" +
    "\046\uffee\051\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\001\002\000\062\003\uffef\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\035\uffef\040\uffef\041\uffef" +
    "\046\uffef\051\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\001\002\000\046\003\240\015\056\016\037" +
    "\017\101\020\045\021\104\022\064\023\052\035\067\040" +
    "\062\041\033\046\053\056\021\057\026\060\024\061\017" +
    "\062\023\063\102\001\002\000\004\004\237\001\002\000" +
    "\062\003\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\035\uffeb\040\uffeb\041\uffeb\046\uffeb\051\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000" +
    "\066\003\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\035\uffba\040\uffba\041\uffba\046\uffba" +
    "\051\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\001\002\000\004\051\ufff6\001\002\000\004\004\235" +
    "\001\002\000\062\003\uffbe\005\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\035\uffbe\040\uffbe\041\uffbe\046\uffbe\051" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\001\002\000\004\051\ufff8\001\002\000\016\056\021\057" +
    "\026\060\024\061\017\062\023\063\245\001\002\000\004" +
    "\047\247\001\002\000\004\047\246\001\002\000\004\004" +
    "\uffc7\001\002\000\004\004\uffc6\001\002\000\004\004\uffac" +
    "\001\002\000\046\004\uffab\024\uff84\025\uff84\027\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\137\001\002\000\044\004\uffad\024\uff85\025\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\001\002\000\044\004\uffaa\024\uff83\025\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\001" +
    "\002\000\026\035\067\040\062\041\033\046\053\056\021" +
    "\057\026\060\132\061\017\062\023\063\135\001\002\000" +
    "\004\047\256\001\002\000\004\050\257\001\002\000\062" +
    "\003\066\005\061\010\077\011\110\012\047\013\125\014" +
    "\063\015\056\016\037\017\101\020\045\021\104\022\064" +
    "\023\052\035\067\040\062\041\033\046\053\056\021\057" +
    "\026\060\024\061\017\062\023\063\102\001\002\000\004" +
    "\051\261\001\002\000\066\003\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\035\uffbd\040" +
    "\uffbd\041\uffbd\046\uffbd\051\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\001\002\000\004\051\236\001" +
    "\002\000\006\006\216\007\217\001\002\000\066\003\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\035\uffbb\040\uffbb\041\uffbb\046\uffbb\051\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001\002" +
    "\000\066\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\035\uffbc\040\uffbc\041\uffbc\046" +
    "\uffbc\051\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\001\002\000\062\003\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\035\ufff0\040\ufff0\041\ufff0\046" +
    "\ufff0\051\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\001\002\000\012\004\uff98\036\uff98\037\uff98\047" +
    "\uff98\001\002\000\012\004\uff95\036\uff95\037\uff95\047\uff95" +
    "\001\002\000\016\025\275\027\301\030\300\031\302\033" +
    "\277\034\276\001\002\000\004\047\273\001\002\000\022" +
    "\004\uff91\036\uff91\037\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\047\uff91\001\002\000\016\056\021\057\026\060\024" +
    "\061\017\062\023\063\135\001\002\000\020\046\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\001\002" +
    "\000\020\046\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\001\002\000\020\046\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\063\uff8a\001\002\000\020\046" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\001\002\000\020\046\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\001\002\000\020\046\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\001\002\000" +
    "\036\004\uff92\025\275\027\301\030\300\031\302\033\277" +
    "\034\276\036\uff92\037\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\047\uff92\001\002\000\020\046\053\056\021\057\026" +
    "\060\024\061\017\062\023\063\135\001\002\000\036\004" +
    "\uff90\025\275\027\301\030\300\031\302\033\277\034\276" +
    "\036\uff90\037\uff90\042\uff90\043\uff90\044\uff90\045\uff90\047" +
    "\uff90\001\002\000\022\004\uff8f\036\uff8f\037\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\047\uff8f\001\002\000\006\056" +
    "\311\057\310\001\002\000\004\047\313\001\002\000\004" +
    "\047\312\001\002\000\004\004\uffc9\001\002\000\004\004" +
    "\uffc8\001\002\000\062\003\ufff3\005\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\035\ufff3\040\ufff3\041\ufff3\046\ufff3" +
    "\051\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\001\002\000\062\003\ufff2\005\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\035\ufff2\040\ufff2\041\ufff2\046\ufff2" +
    "\051\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\001\002\000\040\015\056\016\037\017\101\020\045" +
    "\021\104\035\067\040\062\041\033\046\053\056\021\057" +
    "\026\060\317\061\017\062\023\063\135\001\002\000\044" +
    "\024\uff78\025\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033" +
    "\uff78\034\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\047\357\001\002\000\004\047" +
    "\353\001\002\000\004\047\347\001\002\000\010\036\uffa2" +
    "\037\uffa2\047\343\001\002\000\004\004\326\001\002\000" +
    "\006\004\325\026\162\001\002\000\004\004\uffe5\001\002" +
    "\000\016\056\021\057\026\060\024\061\017\062\023\063" +
    "\135\001\002\000\004\004\337\001\002\000\016\024\332" +
    "\032\334\042\117\043\115\044\120\045\114\001\002\000" +
    "\016\056\021\057\026\060\024\061\017\062\023\063\135" +
    "\001\002\000\016\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\001\002\000\016\056\021\057\026\060\024" +
    "\061\017\062\023\063\135\001\002\000\016\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\001\002\000\012" +
    "\004\uff9f\036\uff9f\037\uff9f\047\uff9f\001\002\000\012\004" +
    "\uffa0\036\uffa0\037\uffa0\047\uffa0\001\002\000\022\040\062" +
    "\041\033\056\021\057\026\060\024\061\017\062\023\063" +
    "\135\001\002\000\004\047\uffb1\001\002\000\006\040\062" +
    "\041\033\001\002\000\012\004\uff96\036\uff96\037\uff96\047" +
    "\uff96\001\002\000\004\050\344\001\002\000\062\003\066" +
    "\005\061\010\077\011\110\012\047\013\125\014\063\015" +
    "\056\016\037\017\101\020\045\021\104\022\064\023\052" +
    "\035\067\040\062\041\033\046\053\056\021\057\026\060" +
    "\024\061\017\062\023\063\102\001\002\000\004\051\346" +
    "\001\002\000\062\003\uffb3\005\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\035\uffb3\040\uffb3\041\uffb3\046\uffb3\051" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\001\002\000\004\050\350\001\002\000\062\003\066\005" +
    "\061\010\077\011\110\012\047\013\125\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\022\064\023\052\035" +
    "\067\040\062\041\033\046\053\056\021\057\026\060\024" +
    "\061\017\062\023\063\102\001\002\000\004\051\352\001" +
    "\002\000\062\003\uffb2\005\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\035\uffb2\040\uffb2\041\uffb2\046\uffb2\051\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001" +
    "\002\000\004\050\354\001\002\000\062\003\066\005\061" +
    "\010\077\011\110\012\047\013\125\014\063\015\056\016" +
    "\037\017\101\020\045\021\104\022\064\023\052\035\067" +
    "\040\062\041\033\046\053\056\021\057\026\060\024\061" +
    "\017\062\023\063\102\001\002\000\004\051\356\001\002" +
    "\000\062\003\uffb5\005\uffb5\010\uffb5\011\uffb5\012\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\035\uffb5\040\uffb5\041\uffb5\046\uffb5\051\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002" +
    "\000\004\050\360\001\002\000\062\003\066\005\061\010" +
    "\077\011\110\012\047\013\125\014\063\015\056\016\037" +
    "\017\101\020\045\021\104\022\064\023\052\035\067\040" +
    "\062\041\033\046\053\056\021\057\026\060\024\061\017" +
    "\062\023\063\102\001\002\000\004\051\362\001\002\000" +
    "\062\003\uffb4\005\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\035\uffb4\040\uffb4\041\uffb4\046\uffb4\051\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001\002\000" +
    "\014\002\uffd3\003\uffd3\015\uffd3\017\uffd3\020\uffd3\001\002" +
    "\000\062\003\uffc1\005\uffc1\010\uffc1\011\uffc1\012\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\035\uffc1\040\uffc1\041\uffc1\046\uffc1\051\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002" +
    "\000\016\056\021\057\026\060\024\061\017\062\023\063" +
    "\135\001\002\000\012\004\uff88\036\uff88\037\uff88\047\uff88" +
    "\001\002\000\010\004\uffea\026\uffea\053\uffea\001\002\000" +
    "\020\046\053\056\372\057\026\060\024\061\371\062\023" +
    "\063\135\001\002\000\020\004\uffdd\025\uff77\027\uff77\030" +
    "\uff77\031\uff77\033\uff77\034\uff77\001\002\000\020\004\uffde" +
    "\025\uff7a\027\uff7a\030\uff7a\031\uff7a\033\uff7a\034\uff7a\001" +
    "\002\000\004\004\uffdc\001\002\000\004\050\375\001\002" +
    "\000\060\003\066\005\061\010\077\011\110\012\047\014" +
    "\063\015\056\016\037\017\101\020\045\021\104\022\064" +
    "\023\052\035\067\040\062\041\033\046\053\056\021\057" +
    "\026\060\024\061\017\062\023\063\102\001\002\000\004" +
    "\051\377\001\002\000\014\002\uffd4\003\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\001\002\000\004\050\u0101\001\002\000\060" +
    "\003\066\005\061\010\077\011\110\012\047\014\063\015" +
    "\056\016\037\017\101\020\045\021\104\022\064\023\052" +
    "\035\067\040\062\041\033\046\053\056\021\057\026\060" +
    "\024\061\017\062\023\063\102\001\002\000\004\051\u0103" +
    "\001\002\000\014\002\uffd2\003\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\001\002\000\060\003\066\005\061\010\077\011\110" +
    "\012\047\014\063\015\056\016\037\017\101\020\045\021" +
    "\104\022\064\023\052\035\067\040\062\041\033\046\053" +
    "\056\021\057\026\060\024\061\017\062\023\063\102\001" +
    "\002\000\004\051\u0106\001\002\000\014\002\uffd5\003\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\001\002\000\004\051\u0108\001" +
    "\002\000\014\002\uffd0\003\uffd0\015\uffd0\017\uffd0\020\uffd0" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002\000\004\046\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\016\002\007\004\003\010\010\012\012\015" +
    "\013\062\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\010\012\u0108\015\013\062\006\001\001\000\004" +
    "\064\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\021\053\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\005\045\006\105\011\071\016\102\017\104\020\074" +
    "\021\050\022\106\023\077\024\064\025\073\026\070\027" +
    "\056\030\072\031\043\032\075\035\067\036\041\037\110" +
    "\040\031\041\035\042\040\043\034\045\054\050\053\053" +
    "\042\055\033\056\047\057\111\060\057\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\273\047\330\050" +
    "\341\051\332\052\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\135\036\270\037\271\053\042\001\001\000" +
    "\010\011\135\036\267\053\042\001\001\000\010\011\135" +
    "\036\266\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\252\035\247\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\251\001\001" +
    "\000\002\001\001\000\100\005\241\006\105\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\035" +
    "\067\036\041\037\110\040\031\041\035\042\040\043\034" +
    "\045\054\050\053\053\042\055\033\056\047\057\111\060" +
    "\057\061\037\001\001\000\006\063\233\066\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\005\172" +
    "\006\105\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\035\067\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\042\055\033" +
    "\056\047\057\111\060\057\061\037\001\001\000\002\001" +
    "\001\000\004\054\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\005\122\006\105" +
    "\007\125\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\034\123\035\067\036\041\037\110\040" +
    "\031\041\035\042\040\043\034\045\054\050\053\053\042" +
    "\055\033\056\047\057\111\060\057\061\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\011" +
    "\135\033\132\035\133\036\041\037\110\040\031\041\035" +
    "\042\040\043\034\045\054\050\053\053\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\137\013" +
    "\141\053\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\137\013\146\053\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\011" +
    "\135\033\153\035\133\036\041\037\110\040\031\041\035" +
    "\042\040\043\034\045\054\050\053\053\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\170\001\001\000\030\011\167\035\164" +
    "\036\041\037\110\040\031\041\035\042\040\043\034\045" +
    "\054\050\053\053\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\204\035\201\036\041\037" +
    "\110\040\031\041\035\042\040\043\034\045\054\050\053" +
    "\053\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\135\033\207\035\133" +
    "\036\041\037\110\040\031\041\035\042\040\043\034\045" +
    "\054\050\053\053\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\005\122\006\105\007\212\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\034" +
    "\123\035\067\036\041\037\110\040\031\041\035\042\040" +
    "\043\034\045\054\050\053\053\042\055\033\056\047\057" +
    "\111\060\057\061\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\011\135\033\220\035\133\036\041\037\110" +
    "\040\031\041\035\042\040\043\034\045\054\050\053\053" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\005\122\006\105\007\223\011\071\016\102\017\104\020" +
    "\074\021\050\022\106\023\077\024\064\025\073\026\070" +
    "\027\056\030\072\031\043\032\075\034\123\035\067\036" +
    "\041\037\110\040\031\041\035\042\040\043\034\045\054" +
    "\050\053\053\042\055\033\056\047\057\111\060\057\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\005\122\006\105\007\226\011\071\016\102\017\104\020" +
    "\074\021\050\022\106\023\077\024\064\025\073\026\070" +
    "\027\056\030\072\031\043\032\075\034\123\035\067\036" +
    "\041\037\110\040\031\041\035\042\040\043\034\045\054" +
    "\050\053\053\042\055\033\056\047\057\111\060\057\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\011\071\016\240\017" +
    "\104\020\074\021\050\022\106\023\077\035\067\036\041" +
    "\037\110\040\031\041\035\042\040\043\034\045\054\050" +
    "\053\053\042\055\033\056\047\057\111\060\057\061\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\135\033\254\035\133\036\041" +
    "\037\110\040\031\041\035\042\040\043\034\045\054\050" +
    "\053\053\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\005\122\006\105\007\257\011\071\016\102\017" +
    "\104\020\074\021\050\022\106\023\077\024\064\025\073" +
    "\026\070\027\056\030\072\031\043\032\075\034\123\035" +
    "\067\036\041\037\110\040\031\041\035\042\040\043\034" +
    "\045\054\050\053\053\042\055\033\056\047\057\111\060" +
    "\057\061\037\001\001\000\002\001\001\000\010\025\262" +
    "\026\264\027\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\135" +
    "\036\302\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\303\001\001\000\012\011" +
    "\135\036\304\037\305\053\042\001\001\000\004\046\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\011\135\017" +
    "\323\020\322\033\317\035\133\036\041\037\110\040\031" +
    "\041\035\042\040\043\321\044\320\045\054\050\053\053" +
    "\042\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\135\036\327" +
    "\041\326\053\042\001\001\000\002\001\001\000\006\047" +
    "\330\051\332\001\001\000\010\011\135\036\335\053\042" +
    "\001\001\000\002\001\001\000\010\011\135\036\334\053" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\135\036\340\040\337\050\053\053" +
    "\042\001\001\000\002\001\001\000\004\050\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\005\122\006" +
    "\105\007\344\011\071\016\102\017\104\020\074\021\050" +
    "\022\106\023\077\024\064\025\073\026\070\027\056\030" +
    "\072\031\043\032\075\034\123\035\067\036\041\037\110" +
    "\040\031\041\035\042\040\043\034\045\054\050\053\053" +
    "\042\055\033\056\047\057\111\060\057\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\005\122\006\105\007\350\011\071\016\102\017\104" +
    "\020\074\021\050\022\106\023\077\024\064\025\073\026" +
    "\070\027\056\030\072\031\043\032\075\034\123\035\067" +
    "\036\041\037\110\040\031\041\035\042\040\043\034\045" +
    "\054\050\053\053\042\055\033\056\047\057\111\060\057" +
    "\061\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\005\122\006\105\007\354\011\071" +
    "\016\102\017\104\020\074\021\050\022\106\023\077\024" +
    "\064\025\073\026\070\027\056\030\072\031\043\032\075" +
    "\034\123\035\067\036\041\037\110\040\031\041\035\042" +
    "\040\043\034\045\054\050\053\053\042\055\033\056\047" +
    "\057\111\060\057\061\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\005\122\006\105" +
    "\007\360\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\034\123\035\067\036\041\037\110\040" +
    "\031\041\035\042\040\043\034\045\054\050\053\053\042" +
    "\055\033\056\047\057\111\060\057\061\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\135\036\365\053\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\135\036\270" +
    "\037\372\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\005\375" +
    "\006\105\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\035\067\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\042\055\033" +
    "\056\047\057\111\060\057\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\005\u0101" +
    "\006\105\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\035\067\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\042\055\033" +
    "\056\047\057\111\060\057\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\005\u0104\006\105\011\071" +
    "\016\102\017\104\020\074\021\050\022\106\023\077\024" +
    "\064\025\073\026\070\027\056\030\072\031\043\032\075" +
    "\035\067\036\041\037\110\040\031\041\035\042\040\043" +
    "\034\045\054\050\053\053\042\055\033\056\047\057\111" +
    "\060\057\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.scanner = scanner;
    }

 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }
    

    // Funcion para reportar errores sintacticos
    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        
    }

    // Funcion para reportar errores fatales
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
  
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    LexerAS scanner;
    
    
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    VerificadorTipos verificador = new VerificadorTipos();
    String codigoBuffer;
    FileWriter escribir;
    String rutaCodigo = "src/pry1_ci/codigoIntermedio.txt";
    int t = 0;
    int l = 0;
   

    public void escribirCodigo(String cadenas) throws FileNotFoundException, IOException{
        escribir = new FileWriter(rutaCodigo, true);
        escribir.write(cadenas);
        escribir.close();
    }
    

    // Funcion para impresion de tabla de simbolos
    public void imprimirTabla() {
       
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    // Funcion para verificar si existe una variable en la funcion
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		
    Thread.sleep(500);
    imprimirTabla();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= crearFuncion funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= return FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
 System.err.println("Error sintactico en la linea "+scanner.getYYLine()) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloqueCod ::= error NT$0 FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= crearArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;
		int vETleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vETright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vET = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;
		 System.err.println("Error sintactico en la linea "+scanner.getYYLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int vTVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");}
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vI.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearAsignarVariable ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    else {
        String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());

        String tipoL = "";
        if (verificador.verificarEntero(vL)) tipoL = "int";
        if (verificador.verificarBooleano(vL)) tipoL = "bool";
        if (verificador.verificarFloat(vL)) tipoL = "float";
        if (verificador.verificarChar(vL)) tipoL = "char";
        if (verificador.verificarString(vL)) tipoL = "string";


        if (!tipo.equals(tipoL)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        }
    }
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;
		int vILleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vILright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vIL = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vIR = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeVar(vIL.toString(), listaTablasSimbolos.get(tablaActual)) && existeVar(vIR.toString(), listaTablasSimbolos.get(tablaActual))) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(vIL.toString());
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(vIR.toString());
        if(!tipo1.equals(tipo2)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // crearArreglo ::= crearVariable arreglo 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vARright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipo.equals("int") && !tipo.equals("char")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ARREGLO ILEGAL]");
    }
    String msg = vID.toString()+vAR.toString()+" = {}\n";
    escribirCodigo(msg);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo ::= LLAVESCUADABRE literal LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "["+vL.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarElementoArreglo ::= elementoArreglo EQ L_ENTERO 
            {
              Object RESULT =null;
		int vELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number vLE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp1 ="t"+t;
    String var1 = " = "+vLE.toString()+"\n";
    escribirCodigo(temp1+var1);
    String msg = vEL.toString()+" = "+temp1+"\n";
    escribirCodigo(msg);
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignarElementoArreglo ::= elementoArreglo EQ L_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignarElementoArreglo ::= elementoArreglo EQ expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number vE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vE.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearFuncion ::= tipoIDFun PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // crearFuncion ::= tipoIDFun PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$1 ::= 
            {
              Object RESULT =null;
System.err.println("Error sintactico en la linea "+scanner.getYYLine()+" [CREACION DE FUNCION]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // crearFuncion ::= error NT$1 LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoIDFun ::= tipoFuncion Identificador 
            {
              Object RESULT =null;
		int vTFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);

    String msg = vID.toString()+"_:\n";
    escribirCodigo(msg);
    
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoIDFun",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
    RESULT = vID; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= funcion 
            {
              Object RESULT =null;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$2 ::= 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = vID; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= Identificador NT$2 COMA parametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // entradaEst ::= SYS_READ PARENTESISABRE L_ENTERO PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // entradaEst ::= SYS_READ PARENTESISABRE L_FLOTANTE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructControl ::= do FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$3 ::= 
            {
              Object RESULT =null;
 
System.err.println("Error sintactico en la linea "+scanner.getYYLine());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructControl ::= error NT$3 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		int vConleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vConright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vCon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    String temp1 = "L"+l;
    l++;
    String msg = "if ("+vCon.toString()+") goto "+temp1+"\n";
    escribirCodigo(msg);
    String temp2 = "L"+l;
    l++;
    escribirCodigo("goto "+temp2+"\n");
    escribirCodigo(temp1+":\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if ::= error LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // else ::= if ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for ::= FOR PARENTESISABRE expresionFor PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresionFor ::= crearAsignarVariable FIN_EXPRESION expresionRelacion FIN_EXPRESION expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionFor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloqueControl ::= bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // return ::= RETURN literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
    String tipoL = "";
    if (verificador.verificarEntero(vL)) tipoL = "int";
    if (verificador.verificarBooleano(vL)) tipoL = "bool";
    if (verificador.verificarFloat(vL)) tipoL = "float";
    if (verificador.verificarChar(vL)) tipoL = "char";
    if (verificador.verificarString(vL)) tipoL = "string";
    System.out.println(tipoL);
    if (!tipoF.equals(tipoL)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vL.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return ::= RETURN Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    else {
        String tipoV = listaTablasSimbolos.get(tablaActual).get(vID.toString());
        String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
        if (!tipoV.equals(tipoF)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return ::= RETURN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int vBOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean vBO = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vBO.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= expresion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEX.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= expresion operadorConjuntiva condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vER.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;
		int vENleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vENright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEN.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresionBinaria operadorRelacional literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
            
        }
        else {System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
        
        }
        else{System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    }
    else {
        if(!verificador.verificarEntero(vOPL) || !verificador.verificarBooleano(vOPL) && !verificador.verificarEntero(vOPR) || !verificador.verificarBooleano(vOPR)) {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
        }
    }
    RESULT = op1+vOR.toString()+op2; 
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOC = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPL.toString()+vOC.toString()+vOPR.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;
		int vOPNleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOPNright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOPN = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vOPN.toString()+vOP.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionUnaria ::= operando operadorUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionUnaria ::= operadorUnario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;
		 RESULT = "--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;
		 RESULT = "++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
   
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);

        if (!tipo1.equals(tipo2)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
        RESULT = "0";
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(vOPR)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                     
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            }
        }

        
        else if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(vOPR)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                }
            }

        }
        RESULT = "0";
    }
    else if (verificador.verificarEntero(vOPL) && verificador.verificarEntero(vOPR)) {

        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        if (op3.equals("+")) {
     
                String temps ="t"+t;
                String vars1 = temps+" = "+op1+"\n";
                escribirCodigo(vars1);
                t++;
                String temps2 ="t"+t;
                String vars2 = temps2+" = "+op2+"\n";
                escribirCodigo(vars2);
                t++;
                String temps3 ="t"+t;
                escribirCodigo(temps3+" = "+temps+" + "+temps2+"\n");
                t++;
                RESULT = e1+e2;
        }
        else if (op3.equals("-")) {
            
                String tempm1 ="t"+t;
                String varm1 = tempm1+" = "+op1+"\n";
                escribirCodigo(varm1);
                t++;
                String tempm2 ="t"+t;
                String varm2 = tempm2+" = "+op2+"\n";
                escribirCodigo(varm2);
                t++;
                String tempm3 ="t"+t;
                escribirCodigo(tempm3+" = "+tempm1+" - "+tempm2+"\n");
                t++;
                RESULT = e1-e2;
          
        }
        else if (op3.equals("*")) {
          
                RESULT = e1*e2;
        }
        else if (op3.equals("/")) {
                if (e2 != 0) {
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    RESULT = "0";
                }
        }
        
                
        else if (op3.equals("**")) {
                RESULT = Math.pow(e1,e2);
        }
        else if (op3.equals("%")){
                RESULT = e1%e2;
        }
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            RESULT = "0";
        }
    }
        
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vOPL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vOPR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionBinaria ::= PARENTESISABRE expresionBinaria PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionBinaria ::= operando operadorBinario operando operadorBinario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionBinaria ::= operando operadorBinario operando operadorBinario expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operadorBinario ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operando ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operando ::= Identificador 
            {
              Object RESULT =null;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (existeVar(vI.toString(), listaTablasSimbolos.get(tablaActual))) RESULT = vI;
    else { 
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        RESULT = "";
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operando ::= funcion 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vRes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipoVariable ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // literal ::= L_ENTERO 
            {
              Object RESULT =null;
		int l_Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_E = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;
		int l_Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_F = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_F; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int l_Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l_B = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int l_Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l_C = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int l_Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l_S = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_S; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
