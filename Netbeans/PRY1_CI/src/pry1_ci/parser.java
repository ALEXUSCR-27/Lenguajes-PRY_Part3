
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pry1_ci;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Math;
import pry1_ci.VerificadorTipos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\012\004\000\002\012\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\063\002\000\002\005\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\004\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\056\004\000\002\054\005\000" +
    "\002\057\005\000\002\057\005\000\002\055\006\000\002" +
    "\055\006\000\002\060\006\000\002\060\006\000\002\011" +
    "\005\000\002\011\006\000\002\010\010\000\002\010\011" +
    "\000\002\010\011\000\002\010\011\000\002\064\002\000" +
    "\002\010\005\000\002\015\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\065\002\000\002\013" +
    "\006\000\002\022\006\000\002\022\006\000\002\023\006" +
    "\000\002\023\006\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\003\000\002\024\004\000\002\025\011\000\002\025" +
    "\012\000\002\025\012\000\002\025\004\000\002\026\012" +
    "\000\002\027\007\000\002\030\011\000\002\031\012\000" +
    "\002\007\003\000\002\007\003\000\002\032\011\000\002" +
    "\032\011\000\002\032\011\000\002\032\011\000\002\044" +
    "\007\000\002\034\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\005\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\005\000\002\041\005\000\002\041\005" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\051\003\000\002\051\003\000\002" +
    "\042\004\000\002\045\003\000\002\040\004\000\002\040" +
    "\004\000\002\050\003\000\002\050\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\007\000\002\037\007\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\043" +
    "\005\000\002\052\003\000\002\052\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\012\003\012\015\007\017\015\020\005\001" +
    "\002\000\004\002\000\001\002\000\004\065\uff84\001\002" +
    "\000\004\065\u0109\001\002\000\004\065\uff83\001\002\000" +
    "\004\002\u0108\001\002\000\014\002\ufffd\003\012\015\007" +
    "\017\015\020\005\001\002\000\004\053\uffd2\001\002\000" +
    "\004\002\uffff\001\002\000\004\050\016\001\002\000\004" +
    "\065\uff82\001\002\000\020\051\020\060\021\061\026\062" +
    "\024\063\017\064\022\065\025\001\002\000\050\004\uff79" +
    "\026\uff79\027\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035" +
    "\uff79\036\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\uff79\051\uff79\056\uff79\001\002\000" +
    "\004\052\u0102\001\002\000\050\004\uff7c\026\uff7c\027\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\051\uff7c\056\uff7c\001\002\000\050\004\uff78\026" +
    "\uff78\027\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\051\uff78\056\uff78\001\002\000\004" +
    "\051\376\001\002\000\050\004\uff7a\026\uff7a\027\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\051\uff7a\056\uff7a\001\002\000\004\051\372\001\002" +
    "\000\050\004\uff7b\026\uff7b\027\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\035\uff7b\036\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\051\uff7b\056" +
    "\uff7b\001\002\000\004\051\030\001\002\000\004\052\031" +
    "\001\002\000\060\003\066\005\061\010\077\011\110\012" +
    "\047\014\063\015\056\016\037\017\101\020\045\021\104" +
    "\024\064\025\052\037\067\042\062\043\033\050\053\060" +
    "\021\061\026\062\024\063\017\064\022\065\102\001\002" +
    "\000\012\004\uffa7\040\uffa7\041\uffa7\051\uffa7\001\002\000" +
    "\026\004\uff95\040\uff95\041\uff95\051\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\001\002\000\004\030" +
    "\367\001\002\000\012\004\uffa4\040\uffa4\041\uffa4\051\uffa4" +
    "\001\002\000\012\004\uffa6\040\uffa6\041\uffa6\051\uffa6\001" +
    "\002\000\004\065\uff7e\001\002\000\004\065\366\001\002" +
    "\000\012\004\uffa5\040\uffa5\041\uffa5\051\uffa5\001\002\000" +
    "\042\026\333\027\275\031\301\032\277\033\300\034\332" +
    "\035\276\036\274\040\152\041\153\042\062\043\033\044" +
    "\117\045\115\046\120\047\114\001\002\000\046\004\uff87" +
    "\026\uff87\027\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\051\uff87\001\002\000\004\004" +
    "\363\001\002\000\004\065\uff81\001\002\000\004\053\362" +
    "\001\002\000\004\050\315\001\002\000\004\004\314\001" +
    "\002\000\004\004\313\001\002\000\004\050\306\001\002" +
    "\000\020\050\053\060\021\061\026\062\024\063\017\064" +
    "\022\065\135\001\002\000\016\060\021\061\026\062\024" +
    "\063\017\064\022\065\135\001\002\000\016\060\021\061" +
    "\026\062\024\063\017\064\022\065\135\001\002\000\004" +
    "\065\uff80\001\002\000\062\003\uffc4\005\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\024\uffc4\025\uffc4\037\uffc4\042\uffc4\043\uffc4\050" +
    "\uffc4\053\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\001\002\000\004\004\265\001\002\000\004\050" +
    "\253\001\002\000\026\004\uff96\040\uff96\041\uff96\051\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\001" +
    "\002\000\026\037\067\042\062\043\033\050\053\060\021" +
    "\061\026\062\024\063\017\064\022\065\250\001\002\000" +
    "\004\050\242\001\002\000\062\003\066\005\061\010\077" +
    "\011\110\012\047\014\063\015\056\016\037\017\101\020" +
    "\045\021\104\024\064\025\052\037\067\042\062\043\033" +
    "\050\053\053\ufffb\060\021\061\026\062\024\063\017\064" +
    "\022\065\102\001\002\000\052\003\236\004\234\015\056" +
    "\016\037\017\101\020\045\021\104\024\064\025\052\037" +
    "\067\042\062\043\033\050\053\053\235\060\021\061\026" +
    "\062\024\063\017\064\022\065\102\001\002\000\016\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\001\002" +
    "\000\004\004\232\001\002\000\062\003\uffc5\005\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\024\uffc5\025\uffc5\037\uffc5\042\uffc5\043" +
    "\uffc5\050\uffc5\053\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\001\002\000\044\004\231\026\uff85\027" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\001\002\000\062\003\uffc3\005\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\024\uffc3\025\uffc3\037\uffc3\042\uffc3\043\uffc3" +
    "\050\uffc3\053\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\001\002\000\066\003\uffc6\005\uffc6\006\216" +
    "\007\217\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\037\uffc6" +
    "\042\uffc6\043\uffc6\050\uffc6\053\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\004\004\215" +
    "\001\002\000\062\003\uffc1\005\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\024\uffc1\025\uffc1\037\uffc1\042\uffc1\043\uffc1\050\uffc1\053" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\001\002\000\004\050\207\001\002\000\004\004\206\001" +
    "\002\000\004\065\uff7f\001\002\000\050\026\uff86\027\uff86" +
    "\030\174\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\137\055\175\001\002\000\062\003" +
    "\066\005\061\010\077\011\110\012\047\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\024\064\025\052\037" +
    "\067\042\062\043\033\050\053\053\ufffc\060\021\061\026" +
    "\062\024\063\017\064\022\065\102\001\002\000\004\065" +
    "\uff7d\001\002\000\010\004\164\030\162\055\161\001\002" +
    "\000\004\004\160\001\002\000\004\004\157\001\002\000" +
    "\004\052\122\001\002\000\022\004\uffa8\040\uffa8\041\uffa8" +
    "\044\117\045\115\046\120\047\114\051\uffa8\001\002\000" +
    "\004\004\113\001\002\000\062\003\ufff1\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\024\ufff1\025\ufff1\037\ufff1\042\ufff1\043\ufff1" +
    "\050\ufff1\053\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\001\002\000\016\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\001\002\000\016\060\uff9f\061" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\001\002\000\014" +
    "\060\021\061\026\062\024\063\017\064\022\001\002\000" +
    "\016\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\001\002\000\016\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\001\002\000\012\004\uffa3\040\uffa3\041\uffa3" +
    "\051\uffa3\001\002\000\062\003\066\005\061\010\077\011" +
    "\110\012\047\013\125\014\063\015\056\016\037\017\101" +
    "\020\045\021\104\024\064\025\052\037\067\042\062\043" +
    "\033\050\053\060\021\061\026\062\024\063\017\064\022" +
    "\065\102\001\002\000\004\053\uffb7\001\002\000\004\053" +
    "\uffb6\001\002\000\004\004\156\001\002\000\004\053\127" +
    "\001\002\000\004\010\130\001\002\000\004\050\131\001" +
    "\002\000\026\037\067\042\062\043\033\050\053\060\021" +
    "\061\026\062\132\063\017\064\022\065\135\001\002\000" +
    "\044\026\uff7a\027\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044" +
    "\uff7a\045\uff7a\046\uff7a\047\uff7a\051\uffab\001\002\000\004" +
    "\051\155\001\002\000\010\040\152\041\153\051\uffaa\001" +
    "\002\000\050\004\uff86\026\uff86\027\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\035\uff86\036\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\137" +
    "\051\uff86\001\002\000\046\004\uff85\026\uff85\027\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\051\uff85\001\002\000\020\051\141\060\021\061\026" +
    "\062\024\063\017\064\022\065\143\001\002\000\004\051" +
    "\uffcd\001\002\000\046\004\uffd8\026\uffd8\027\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\001\002\000\004\051\150\001\002\000\010\050" +
    "\137\051\uffcf\054\uffcc\001\002\000\004\051\uffce\001\002" +
    "\000\004\054\146\001\002\000\016\060\021\061\026\062" +
    "\024\063\017\064\022\065\143\001\002\000\004\051\uffcb" +
    "\001\002\000\046\004\uffd7\026\uffd7\027\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051" +
    "\uffd7\001\002\000\026\037\067\042\062\043\033\050\053" +
    "\060\021\061\026\062\132\063\017\064\022\065\135\001" +
    "\002\000\026\037\uff89\042\uff89\043\uff89\050\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\001\002\000" +
    "\026\037\uff88\042\uff88\043\uff88\050\uff88\060\uff88\061\uff88" +
    "\062\uff88\063\uff88\064\uff88\065\uff88\001\002\000\004\051" +
    "\uffa9\001\002\000\004\004\uffb8\001\002\000\004\053\uffb0" +
    "\001\002\000\062\003\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\024\uffed\025\uffed\037\uffed\042\uffed\043\uffed\050\uffed\053" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\001\002\000\004\053\ufffa\001\002\000\014\060\021\061" +
    "\026\062\024\063\017\064\022\001\002\000\026\037\067" +
    "\042\062\043\033\050\053\060\021\061\026\062\024\063" +
    "\017\064\022\065\166\001\002\000\004\004\uffe0\001\002" +
    "\000\064\003\ufff5\004\uffe5\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\024\ufff5\025\ufff5\037\ufff5\042\ufff5\043\ufff5\050\ufff5\053" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\001\002\000\004\004\uffe8\001\002\000\046\004\uffe7\026" +
    "\uff86\027\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\137\001\002\000\044\004\uffe9" +
    "\026\uff87\027\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\001\002\000\044\004\uffe6\026" +
    "\uff85\027\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85" +
    "\036\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\001\002\000\004\056\172\001\002" +
    "\000\004\004\uffdf\001\002\000\004\053\ufff9\001\002\000" +
    "\026\037\067\042\062\043\033\050\053\060\021\061\026" +
    "\062\024\063\017\064\022\065\203\001\002\000\006\060" +
    "\176\065\177\001\002\000\004\056\201\001\002\000\004" +
    "\056\200\001\002\000\006\004\uffd9\030\uffdb\001\002\000" +
    "\006\004\uffda\030\uffdc\001\002\000\004\004\uffe3\001\002" +
    "\000\046\004\uffe2\026\uff86\027\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\137\001" +
    "\002\000\044\004\uffe4\026\uff87\027\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\001\002" +
    "\000\044\004\uffe1\026\uff85\027\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\001\002\000" +
    "\062\003\uffec\005\uffec\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\024\uffec\025" +
    "\uffec\037\uffec\042\uffec\043\uffec\050\uffec\053\uffec\060\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\001\002\000" +
    "\026\037\067\042\062\043\033\050\053\060\021\061\026" +
    "\062\132\063\017\064\022\065\135\001\002\000\004\051" +
    "\211\001\002\000\004\052\212\001\002\000\062\003\066" +
    "\005\061\010\077\011\110\012\047\013\125\014\063\015" +
    "\056\016\037\017\101\020\045\021\104\024\064\025\052" +
    "\037\067\042\062\043\033\050\053\060\021\061\026\062" +
    "\024\063\017\064\022\065\102\001\002\000\004\053\214" +
    "\001\002\000\062\003\uffb9\005\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\024\uffb9\025\uffb9\037\uffb9\042\uffb9\043\uffb9\050\uffb9\053" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\001\002\000\062\003\ufff4\005\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\025\ufff4\037\ufff4\042\ufff4\043\ufff4\050\ufff4\053" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\001\002\000\004\052\226\001\002\000\004\050\220\001" +
    "\002\000\026\037\067\042\062\043\033\050\053\060\021" +
    "\061\026\062\132\063\017\064\022\065\135\001\002\000" +
    "\004\051\222\001\002\000\004\052\223\001\002\000\062" +
    "\003\066\005\061\010\077\011\110\012\047\013\125\014" +
    "\063\015\056\016\037\017\101\020\045\021\104\024\064" +
    "\025\052\037\067\042\062\043\033\050\053\060\021\061" +
    "\026\062\024\063\017\064\022\065\102\001\002\000\004" +
    "\053\225\001\002\000\066\003\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\024\uffbb\025\uffbb\037\uffbb\042" +
    "\uffbb\043\uffbb\050\uffbb\053\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\001\002\000\062\003\066\005" +
    "\061\010\077\011\110\012\047\013\125\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\024\064\025\052\037" +
    "\067\042\062\043\033\050\053\060\021\061\026\062\024" +
    "\063\017\064\022\065\102\001\002\000\004\053\230\001" +
    "\002\000\066\003\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\024\uffba\025\uffba\037\uffba\042\uffba\043\uffba" +
    "\050\uffba\053\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\001\002\000\062\003\uffee\005\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\024\uffee\025\uffee\037\uffee\042\uffee\043\uffee" +
    "\050\uffee\053\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\001\002\000\062\003\uffef\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\024\uffef\025\uffef\037\uffef\042\uffef\043\uffef" +
    "\050\uffef\053\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\001\002\000\004\004\240\001\002\000\062" +
    "\003\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb" +
    "\037\uffeb\042\uffeb\043\uffeb\050\uffeb\053\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\001\002\000\066" +
    "\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\024\uffbc\025\uffbc\037\uffbc\042\uffbc\043\uffbc\050\uffbc\053" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\004\004\234\001\002\000\062\003\uffc0\005" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\024\uffc0\025\uffc0\037\uffc0\042" +
    "\uffc0\043\uffc0\050\uffc0\053\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\001\002\000\004\053\ufff6\001" +
    "\002\000\004\053\ufff8\001\002\000\016\060\021\061\026" +
    "\062\024\063\017\064\022\065\244\001\002\000\004\051" +
    "\246\001\002\000\004\051\245\001\002\000\004\004\uffc8" +
    "\001\002\000\004\004\uffc7\001\002\000\004\004\uffae\001" +
    "\002\000\046\004\uffad\026\uff86\027\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\035\uff86\036\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\137" +
    "\001\002\000\044\004\uffaf\026\uff87\027\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\036\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\001" +
    "\002\000\044\004\uffac\026\uff85\027\uff85\031\uff85\032\uff85" +
    "\033\uff85\034\uff85\035\uff85\036\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\001\002" +
    "\000\026\037\067\042\062\043\033\050\053\060\021\061" +
    "\026\062\132\063\017\064\022\065\135\001\002\000\004" +
    "\051\255\001\002\000\004\052\256\001\002\000\062\003" +
    "\066\005\061\010\077\011\110\012\047\013\125\014\063" +
    "\015\056\016\037\017\101\020\045\021\104\024\064\025" +
    "\052\037\067\042\062\043\033\050\053\060\021\061\026" +
    "\062\024\063\017\064\022\065\102\001\002\000\004\053" +
    "\260\001\002\000\066\003\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\024\uffbf\025\uffbf\037\uffbf\042\uffbf" +
    "\043\uffbf\050\uffbf\053\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\001\002\000\004\053\235\001\002" +
    "\000\006\006\216\007\217\001\002\000\066\003\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\024\uffbd\025" +
    "\uffbd\037\uffbd\042\uffbd\043\uffbd\050\uffbd\053\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\066\003\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\024\uffbe\025\uffbe\037\uffbe\042\uffbe\043\uffbe\050\uffbe" +
    "\053\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\001\002\000\062\003\ufff0\005\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\024\ufff0\025\ufff0\037\ufff0\042\ufff0\043\ufff0\050\ufff0" +
    "\053\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\001\002\000\012\004\uff9a\040\uff9a\041\uff9a\051\uff9a" +
    "\001\002\000\012\004\uff97\040\uff97\041\uff97\051\uff97\001" +
    "\002\000\016\027\275\031\301\032\277\033\300\035\276" +
    "\036\274\001\002\000\004\051\272\001\002\000\022\004" +
    "\uff93\040\uff93\041\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\051\uff93\001\002\000\016\060\021\061\026\062\024\063" +
    "\017\064\022\065\135\001\002\000\020\050\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\001\002\000" +
    "\020\050\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\001\002\000\020\050\uff8c\060\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\001\002\000\020\050\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\001" +
    "\002\000\020\050\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\001\002\000\020\050\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\001\002\000\036" +
    "\004\uff94\027\275\031\301\032\277\033\300\035\276\036" +
    "\274\040\uff94\041\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\051\uff94\001\002\000\020\050\053\060\021\061\026\062" +
    "\024\063\017\064\022\065\135\001\002\000\036\004\uff92" +
    "\027\275\031\301\032\277\033\300\035\276\036\274\040" +
    "\uff92\041\uff92\044\uff92\045\uff92\046\uff92\047\uff92\051\uff92" +
    "\001\002\000\022\004\uff91\040\uff91\041\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\051\uff91\001\002\000\006\060\310" +
    "\061\307\001\002\000\004\051\312\001\002\000\004\051" +
    "\311\001\002\000\004\004\uffca\001\002\000\004\004\uffc9" +
    "\001\002\000\062\003\ufff3\005\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\024\ufff3\025\ufff3\037\ufff3\042\ufff3\043\ufff3\050\ufff3\053" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\001\002\000\062\003\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\024\ufff2\025\ufff2\037\ufff2\042\ufff2\043\ufff2\050\ufff2\053" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\001\002\000\040\015\056\016\037\017\101\020\045\021" +
    "\104\037\067\042\062\043\033\050\053\060\021\061\026" +
    "\062\316\063\017\064\022\065\135\001\002\000\044\026" +
    "\uff7a\027\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\051\356\001\002\000\004\051\352" +
    "\001\002\000\004\051\346\001\002\000\010\040\uffa4\041" +
    "\uffa4\051\342\001\002\000\004\004\325\001\002\000\006" +
    "\004\324\030\162\001\002\000\004\004\uffe5\001\002\000" +
    "\016\060\021\061\026\062\024\063\017\064\022\065\135" +
    "\001\002\000\004\004\336\001\002\000\016\026\333\034" +
    "\332\044\117\045\115\046\120\047\114\001\002\000\016" +
    "\060\021\061\026\062\024\063\017\064\022\065\135\001" +
    "\002\000\016\060\021\061\026\062\024\063\017\064\022" +
    "\065\135\001\002\000\016\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\001\002\000\016\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\012\004" +
    "\uffa1\040\uffa1\041\uffa1\051\uffa1\001\002\000\012\004\uffa2" +
    "\040\uffa2\041\uffa2\051\uffa2\001\002\000\022\042\062\043" +
    "\033\060\021\061\026\062\024\063\017\064\022\065\135" +
    "\001\002\000\004\051\uffb1\001\002\000\006\042\062\043" +
    "\033\001\002\000\012\004\uff98\040\uff98\041\uff98\051\uff98" +
    "\001\002\000\004\052\343\001\002\000\062\003\066\005" +
    "\061\010\077\011\110\012\047\013\125\014\063\015\056" +
    "\016\037\017\101\020\045\021\104\024\064\025\052\037" +
    "\067\042\062\043\033\050\053\060\021\061\026\062\024" +
    "\063\017\064\022\065\102\001\002\000\004\053\345\001" +
    "\002\000\062\003\uffb3\005\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\024" +
    "\uffb3\025\uffb3\037\uffb3\042\uffb3\043\uffb3\050\uffb3\053\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\001" +
    "\002\000\004\052\347\001\002\000\062\003\066\005\061" +
    "\010\077\011\110\012\047\013\125\014\063\015\056\016" +
    "\037\017\101\020\045\021\104\024\064\025\052\037\067" +
    "\042\062\043\033\050\053\060\021\061\026\062\024\063" +
    "\017\064\022\065\102\001\002\000\004\053\351\001\002" +
    "\000\062\003\uffb2\005\uffb2\010\uffb2\011\uffb2\012\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2" +
    "\025\uffb2\037\uffb2\042\uffb2\043\uffb2\050\uffb2\053\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\004\052\353\001\002\000\062\003\066\005\061\010" +
    "\077\011\110\012\047\013\125\014\063\015\056\016\037" +
    "\017\101\020\045\021\104\024\064\025\052\037\067\042" +
    "\062\043\033\050\053\060\021\061\026\062\024\063\017" +
    "\064\022\065\102\001\002\000\004\053\355\001\002\000" +
    "\062\003\uffb5\005\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\024\uffb5\025" +
    "\uffb5\037\uffb5\042\uffb5\043\uffb5\050\uffb5\053\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000" +
    "\004\052\357\001\002\000\062\003\066\005\061\010\077" +
    "\011\110\012\047\013\125\014\063\015\056\016\037\017" +
    "\101\020\045\021\104\024\064\025\052\037\067\042\062" +
    "\043\033\050\053\060\021\061\026\062\024\063\017\064" +
    "\022\065\102\001\002\000\004\053\361\001\002\000\062" +
    "\003\uffb4\005\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\025\uffb4" +
    "\037\uffb4\042\uffb4\043\uffb4\050\uffb4\053\uffb4\060\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000\014" +
    "\002\uffd4\003\uffd4\015\uffd4\017\uffd4\020\uffd4\001\002\000" +
    "\062\003\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\025" +
    "\uffc2\037\uffc2\042\uffc2\043\uffc2\050\uffc2\053\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000" +
    "\016\060\021\061\026\062\024\063\017\064\022\065\135" +
    "\001\002\000\012\004\uff8a\040\uff8a\041\uff8a\051\uff8a\001" +
    "\002\000\010\004\uffea\030\uffea\055\uffea\001\002\000\006" +
    "\060\370\063\371\001\002\000\004\004\uffde\001\002\000" +
    "\004\004\uffdd\001\002\000\004\052\373\001\002\000\060" +
    "\003\066\005\061\010\077\011\110\012\047\014\063\015" +
    "\056\016\037\017\101\020\045\021\104\024\064\025\052" +
    "\037\067\042\062\043\033\050\053\060\021\061\026\062" +
    "\024\063\017\064\022\065\102\001\002\000\004\053\375" +
    "\001\002\000\014\002\uffd5\003\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\001\002\000\004\052\377\001\002\000\060\003\066" +
    "\005\061\010\077\011\110\012\047\014\063\015\056\016" +
    "\037\017\101\020\045\021\104\024\064\025\052\037\067" +
    "\042\062\043\033\050\053\060\021\061\026\062\024\063" +
    "\017\064\022\065\102\001\002\000\004\053\u0101\001\002" +
    "\000\014\002\uffd3\003\uffd3\015\uffd3\017\uffd3\020\uffd3\001" +
    "\002\000\060\003\066\005\061\010\077\011\110\012\047" +
    "\014\063\015\056\016\037\017\101\020\045\021\104\024" +
    "\064\025\052\037\067\042\062\043\033\050\053\060\021" +
    "\061\026\062\024\063\017\064\022\065\102\001\002\000" +
    "\004\053\u0104\001\002\000\014\002\uffd6\003\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\001\002\000\004\053\u0106\001\002\000" +
    "\014\002\uffd1\003\uffd1\015\uffd1\017\uffd1\020\uffd1\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\050\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\016\002\007\004\003\010\010\012\012\015" +
    "\013\062\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\010\012\u0106\015\013\062\005\001\001\000\004" +
    "\064\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\022\053\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\005\045\006\105\011\071\016\102\017\104\020\074" +
    "\021\050\022\106\023\077\024\064\025\073\026\070\027" +
    "\056\030\072\031\043\032\075\035\067\036\041\037\110" +
    "\040\031\041\035\042\040\043\034\045\054\050\053\053" +
    "\042\055\033\056\047\057\111\060\057\061\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\272\047\327\050" +
    "\340\051\330\052\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\135\036\267\037\270\053\042\001\001\000" +
    "\010\011\135\036\266\053\042\001\001\000\010\011\135" +
    "\036\265\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\251\035\246\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\250\001\001" +
    "\000\002\001\001\000\100\005\240\006\105\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\035" +
    "\067\036\041\037\110\040\031\041\035\042\040\043\034" +
    "\045\054\050\053\053\042\055\033\056\047\057\111\060" +
    "\057\061\037\001\001\000\060\011\071\016\236\017\104" +
    "\020\074\021\050\022\106\023\077\035\067\036\041\037" +
    "\110\040\031\041\035\042\040\043\034\045\054\050\053" +
    "\053\042\055\033\056\047\057\111\060\057\061\037\063" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\005\172\006\105\011\071\016\102\017\104\020\074" +
    "\021\050\022\106\023\077\024\064\025\073\026\070\027" +
    "\056\030\072\031\043\032\075\035\067\036\041\037\110" +
    "\040\031\041\035\042\040\043\034\045\054\050\053\053" +
    "\042\055\033\056\047\057\111\060\057\061\037\001\001" +
    "\000\002\001\001\000\004\054\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\005" +
    "\122\006\105\007\125\011\071\016\102\017\104\020\074" +
    "\021\050\022\106\023\077\024\064\025\073\026\070\027" +
    "\056\030\072\031\043\032\075\034\123\035\067\036\041" +
    "\037\110\040\031\041\035\042\040\043\034\045\054\050" +
    "\053\053\042\055\033\056\047\057\111\060\057\061\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\135\033\132\035\133\036\041\037\110\040" +
    "\031\041\035\042\040\043\034\045\054\050\053\053\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\137\013\141\053\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\137\013" +
    "\146\053\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\011\135\033\153\035\133\036\041\037\110\040" +
    "\031\041\035\042\040\043\034\045\054\050\053\053\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\170\001\001\000\030\011" +
    "\167\035\164\036\041\037\110\040\031\041\035\042\040" +
    "\043\034\045\054\050\053\053\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\204\035\201" +
    "\036\041\037\110\040\031\041\035\042\040\043\034\045" +
    "\054\050\053\053\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\011\135\033" +
    "\207\035\133\036\041\037\110\040\031\041\035\042\040" +
    "\043\034\045\054\050\053\053\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\005\122\006\105\007\212" +
    "\011\071\016\102\017\104\020\074\021\050\022\106\023" +
    "\077\024\064\025\073\026\070\027\056\030\072\031\043" +
    "\032\075\034\123\035\067\036\041\037\110\040\031\041" +
    "\035\042\040\043\034\045\054\050\053\053\042\055\033" +
    "\056\047\057\111\060\057\061\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\135\033\220\035\133\036" +
    "\041\037\110\040\031\041\035\042\040\043\034\045\054" +
    "\050\053\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\005\122\006\105\007\223\011\071\016\102" +
    "\017\104\020\074\021\050\022\106\023\077\024\064\025" +
    "\073\026\070\027\056\030\072\031\043\032\075\034\123" +
    "\035\067\036\041\037\110\040\031\041\035\042\040\043" +
    "\034\045\054\050\053\053\042\055\033\056\047\057\111" +
    "\060\057\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\005\122\006\105\007\226\011\071\016\102" +
    "\017\104\020\074\021\050\022\106\023\077\024\064\025" +
    "\073\026\070\027\056\030\072\031\043\032\075\034\123" +
    "\035\067\036\041\037\110\040\031\041\035\042\040\043" +
    "\034\045\054\050\053\053\042\055\033\056\047\057\111" +
    "\060\057\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\011" +
    "\135\033\253\035\133\036\041\037\110\040\031\041\035" +
    "\042\040\043\034\045\054\050\053\053\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\005\122\006\105" +
    "\007\256\011\071\016\102\017\104\020\074\021\050\022" +
    "\106\023\077\024\064\025\073\026\070\027\056\030\072" +
    "\031\043\032\075\034\123\035\067\036\041\037\110\040" +
    "\031\041\035\042\040\043\034\045\054\050\053\053\042" +
    "\055\033\056\047\057\111\060\057\061\037\001\001\000" +
    "\002\001\001\000\010\025\261\026\263\027\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\135\036\301\053\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\302\001\001\000\012\011\135\036\303\037\304\053" +
    "\042\001\001\000\004\046\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\011\135\017\322\020\321\033\316\035" +
    "\133\036\041\037\110\040\031\041\035\042\040\043\320" +
    "\044\317\045\054\050\053\053\042\061\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\135\036\326\041\325\053\042\001\001" +
    "\000\002\001\001\000\006\047\327\051\330\001\001\000" +
    "\010\011\135\036\334\053\042\001\001\000\010\011\135" +
    "\036\333\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\135" +
    "\036\337\040\336\050\053\053\042\001\001\000\002\001" +
    "\001\000\004\050\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\005\122\006\105\007\343\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\034" +
    "\123\035\067\036\041\037\110\040\031\041\035\042\040" +
    "\043\034\045\054\050\053\053\042\055\033\056\047\057" +
    "\111\060\057\061\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\005\122\006\105\007" +
    "\347\011\071\016\102\017\104\020\074\021\050\022\106" +
    "\023\077\024\064\025\073\026\070\027\056\030\072\031" +
    "\043\032\075\034\123\035\067\036\041\037\110\040\031" +
    "\041\035\042\040\043\034\045\054\050\053\053\042\055" +
    "\033\056\047\057\111\060\057\061\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\005" +
    "\122\006\105\007\353\011\071\016\102\017\104\020\074" +
    "\021\050\022\106\023\077\024\064\025\073\026\070\027" +
    "\056\030\072\031\043\032\075\034\123\035\067\036\041" +
    "\037\110\040\031\041\035\042\040\043\034\045\054\050" +
    "\053\053\042\055\033\056\047\057\111\060\057\061\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\005\122\006\105\007\357\011\071\016\102" +
    "\017\104\020\074\021\050\022\106\023\077\024\064\025" +
    "\073\026\070\027\056\030\072\031\043\032\075\034\123" +
    "\035\067\036\041\037\110\040\031\041\035\042\040\043" +
    "\034\045\054\050\053\053\042\055\033\056\047\057\111" +
    "\060\057\061\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\135" +
    "\036\364\053\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\373\006\105\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\035" +
    "\067\036\041\037\110\040\031\041\035\042\040\043\034" +
    "\045\054\050\053\053\042\055\033\056\047\057\111\060" +
    "\057\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\005\377\006\105\011\071\016" +
    "\102\017\104\020\074\021\050\022\106\023\077\024\064" +
    "\025\073\026\070\027\056\030\072\031\043\032\075\035" +
    "\067\036\041\037\110\040\031\041\035\042\040\043\034" +
    "\045\054\050\053\053\042\055\033\056\047\057\111\060" +
    "\057\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\005\u0102\006\105\011\071\016\102\017\104\020" +
    "\074\021\050\022\106\023\077\024\064\025\073\026\070" +
    "\027\056\030\072\031\043\032\075\035\067\036\041\037" +
    "\110\040\031\041\035\042\040\043\034\045\054\050\053" +
    "\053\042\055\033\056\047\057\111\060\057\061\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.scanner = scanner;
    }

 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }
    

    // Funcion para reportar errores sintacticos
    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        
    }

    // Funcion para reportar errores fatales
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
  
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    LexerAS scanner;
    
    
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    VerificadorTipos verificador = new VerificadorTipos();
    String codigoBuffer;
    FileWriter escribir;
    String rutaCodigo = "src/pry1_ci/codigoIntermedio.txt";
    int t = 0;
    int l = 0;
   

    public void escribirCodigo(String cadenas) throws FileNotFoundException, IOException{
        escribir = new FileWriter(rutaCodigo, true);
        //BufferedWriter buffer = new BufferedWriter(escribir);
        escribir.write(cadenas);
        escribir.close();
    }
    

    // Funcion para impresion de tabla de simbolos
    public void imprimirTabla() {
        /*System.out.println("[IMPRIMIENDO TABLA DE SIMBOLOS]\n");
        for (String key: listaTablasSimbolos.keySet()) {
            System.out.println("Tabla de simbolos Funcion:"+ key);
            System.out.println("Valores del bloque de funcion ");
            for (String item : listaTablasSimbolos.get(key)) {
                System.out.println(item);
            }
            System.out.println("");
        }*/
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    // Funcion para verificar si existe una variable en la funcion
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		
    Thread.sleep(500);
    imprimirTabla();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= crearFuncion funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= crearFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloqueCod ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloqueCod ::= estructControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloqueCod ::= return FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueCod ::= sentencia bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueCod ::= estructControl bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
 System.err.println("Error sintactico en la linea "+scanner.getYYLine()+" [BLOQUE DE CODIGO]") ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloqueCod ::= error NT$0 FIN_EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueCod",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= crearAsignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignarVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= crearArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= asignarElementoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= obtenerDatoArreglo FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= expresion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funcion FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= entradaEst FIN_EXPRESION 
            {
              Object RESULT =null;
		int vETleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vETright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vET = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= salidaEst FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= error FIN_EXPRESION 
            {
              Object RESULT =null;
		 System.err.println("Error sintactico en la linea "+scanner.getYYLine()+" [CREACION DE SENTENCIA]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // crearVariable ::= tipoVariable Identificador 
            {
              Object RESULT =null;
		int vTVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTV = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearVariable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // crearAsignarVariable ::= crearVariable EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");}
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // crearAsignarVariable ::= crearVariable EQ expresion 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // crearAsignarVariable ::= crearVariable EQ Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vI.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // crearAsignarVariable ::= crearVariable EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // crearAsignarVariable ::= crearVariable FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearAsignarVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarVariable ::= Identificador EQ literal 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    else {
        String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());

        String tipoL = "";
        if (verificador.verificarEntero(vL)) tipoL = "int";
        if (verificador.verificarBooleano(vL)) tipoL = "bool";
        if (verificador.verificarFloat(vL)) tipoL = "float";
        if (verificador.verificarChar(vL)) tipoL = "char";
        if (verificador.verificarString(vL)) tipoL = "string";


        if (!tipo.equals(tipoL)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        }
    }
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariable ::= Identificador EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariable ::= Identificador EQ Identificador 
            {
              Object RESULT =null;
		int vILleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vILright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vIL = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vIR = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (existeVar(vIL.toString(), listaTablasSimbolos.get(tablaActual)) && existeVar(vIR.toString(), listaTablasSimbolos.get(tablaActual))) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(vIL.toString());
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(vIR.toString());
        if(!tipo1.equals(tipo2)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariable ::= Identificador EQ funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // crearArreglo ::= crearVariable arreglo 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vID = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vARleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vARright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vAR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipo.equals("int") && !tipo.equals("char")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ARREGLO ILEGAL]");
    }
    String msg = vID.toString()+vAR.toString()+" = {}\n";
    escribirCodigo(msg);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearArreglo",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo ::= LLAVESCUADABRE literal LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "["+vL.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarElementoArreglo ::= elementoArreglo EQ L_ENTERO 
            {
              Object RESULT =null;
		int vELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vEL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vLEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number vLE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp1 ="t"+t;
    String var1 = " = "+vLE.toString()+"\n";
    escribirCodigo(temp1+var1);
    String msg = vEL.toString()+" = "+temp1+"\n";
    escribirCodigo(msg);
    t++;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignarElementoArreglo ::= elementoArreglo EQ L_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarElementoArreglo",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elementoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.Number vE = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = vID.toString()+"["+vE.toString()+"]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoArreglo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // obtenerDatoArreglo ::= Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obtenerDatoArreglo",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= Identificador PARENTESISABRE PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= Identificador PARENTESISABRE parametro PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // crearFuncion ::= tipoIDFun PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // crearFuncion ::= tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // crearFuncion ::= tipoIDFun PARENTESISABRE literal PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // crearFuncion ::= tipoIDFun PARENTESISABRE crearParametro PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;
System.err.println("Error sintactico en la linea "+scanner.getYYLine()+" [CREACION DE FUNCION]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // crearFuncion ::= error NT$1 LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crearFuncion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoIDFun ::= tipoFuncion Identificador 
            {
              Object RESULT =null;
		int vTFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //String tipoTabla = "";
   // if (vID.toString().equals("main")) tipoTabla = "Funcion [main], tipo:"+vTF.toString();
   // else {tipoTabla = "Funcion ["+vID+"], tipo :"+vTF.toString();}
    //ArrayList<String> funciones = new ArrayList<String>();   
    //System.out.println(nombreFun);
    //funciones.add(tipoTabla);


    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);

    String msg = vID.toString()+"_:\n";
    escribirCodigo(msg);
    
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoIDFun",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
    RESULT = vID; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= funcion 
            {
              Object RESULT =null;
		int vFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vF; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = vID; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= Identificador NT$2 COMA parametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // entradaEst ::= SYS_READ PARENTESISABRE L_ENTERO PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // entradaEst ::= SYS_READ PARENTESISABRE L_FLOTANTE PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entradaEst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // salidaEst ::= SYS_PRINT PARENTESISABRE Identificador PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // salidaEst ::= SYS_PRINT PARENTESISABRE literal PARENTESISCIERRA 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salidaEst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructControl ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructControl ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructControl ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructControl ::= do FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructControl ::= error sentencia 
            {
              Object RESULT =null;
		 
System.err.println("Error sintactico en la linea "+scanner.getYYLine()+" [ESTRUCTURA DE CONTROL]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructControl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;
		int vConleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vConright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vCon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    String temp1 = "L"+l;
    l++;
    String msg = "if ("+vCon.toString()+") goto "+temp1+"\n";
    escribirCodigo(msg);
    String temp2 = "L"+l;
    l++;
    escribirCodigo("goto "+temp2+"\n");
    escribirCodigo(temp1+":\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if ::= error LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else ::= if ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bloqueControl ::= bloqueCod 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bloqueControl ::= break 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueControl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for ::= FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for ::= FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for ::= FOR PARENTESISABRE expresionFor PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresionFor ::= crearAsignarVariable FIN_EXPRESION expresionRelacion FIN_EXPRESION expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionFor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // break ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // return ::= RETURN literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
    String tipoL = "";
    if (verificador.verificarEntero(vL)) tipoL = "int";
    if (verificador.verificarBooleano(vL)) tipoL = "bool";
    if (verificador.verificarFloat(vL)) tipoL = "float";
    if (verificador.verificarChar(vL)) tipoL = "char";
    if (verificador.verificarString(vL)) tipoL = "string";
    System.out.println(tipoL);
    if (!tipoF.equals(tipoL)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vL.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // return ::= RETURN Identificador 
            {
              Object RESULT =null;
		int vIDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vID = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    else {
        String tipoV = listaTablasSimbolos.get(tablaActual).get(vID.toString());
        String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
        if (!tipoV.equals(tipoF)) System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return ::= RETURN funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int vBOleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vBOright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean vBO = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vBO.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion ::= expresion 
            {
              Object RESULT =null;
		int vEXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vEXright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vEX = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vEX.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= expresion operadorConjuntiva condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresionUnaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresionRelacion 
            {
              Object RESULT =null;
		int vERleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vERright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vER = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vER.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresionNegacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresionConjuntiva 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresionBinaria operadorRelacional literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionRelacion ::= operando operadorRelacional operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vORleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vORright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
            
        }
        else {System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            }
        
        }
        else{System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");}
    }
    else {
        if(!verificador.verificarEntero(vOPL) || !verificador.verificarBooleano(vOPL) && !verificador.verificarEntero(vOPR) || !verificador.verificarBooleano(vOPR)) {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
        }
    }
    RESULT = op1+vOR.toString()+op2; 
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionRelacion ::= operando operadorComparacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadorRelacional ::= GREATER_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadorRelacional ::= LESS_THAN_OR_EQ 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadorComparacion ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadorComparacion ::= NOT_EQ 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorComparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionNegacion ::= operadorNegacion operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionNegacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadorNegacion ::= NEGACION 
            {
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorNegacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionUnaria ::= operando operadorUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionUnaria ::= operadorUnario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnaria",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadorUnario ::= MINUSMINUS 
            {
              Object RESULT =null;
		 RESULT = "--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operadorUnario ::= PLUSPLUS 
            {
              Object RESULT =null;
		 RESULT = "++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionBinaria ::= operando operadorBinario operando 
            {
              Object RESULT =null;
		int vOPLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vOPLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vOPL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vOBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vOBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vOB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vOPRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vOPRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vOPR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
   
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);

        if (!tipo1.equals(tipo2)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
        }
        RESULT = "0";
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(vOPR)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                     
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            }
        }

        
        else if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(vOPR)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                }
            }

        }
        RESULT = "0";
    }
    

    else if (verificador.verificarEntero(vOPL) && verificador.verificarEntero(vOPR)) {

        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        if (op3.equals("+")) {
     
                String temps ="t"+t;
                String vars1 = temps+" = "+op1+"\n";
                escribirCodigo(vars1);
                t++;
                String temps2 ="t"+t;
                String vars2 = temps2+" = "+op2+"\n";
                escribirCodigo(vars2);
                t++;
                String temps3 ="t"+t;
                escribirCodigo(temps3+" = "+temps+" + "+temps2+"\n");
                t++;
                RESULT = e1+e2;
        }
        else if (op3.equals("-")) {
            
                String tempm1 ="t"+t;
                String varm1 = tempm1+" = "+op1+"\n";
                escribirCodigo(varm1);
                t++;
                String tempm2 ="t"+t;
                String varm2 = tempm2+" = "+op2+"\n";
                escribirCodigo(varm2);
                t++;
                String tempm3 ="t"+t;
                escribirCodigo(tempm3+" = "+tempm1+" - "+tempm2+"\n");
                t++;
                RESULT = e1-e2;
          
        }
        else if (op3.equals("*")) {
          
                RESULT = e1*e2;
        }
        else if (op3.equals("/")) {
                if (e2 != 0) {
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    RESULT = "0";
                }
        }
        
                
        else if (op3.equals("**")) {
                RESULT = Math.pow(e1,e2);
        }
        else if (op3.equals("%")){
                RESULT = e1%e2;
        }
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            RESULT = "0";
        }
    }
 /*       
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
*/
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionBinaria ::= PARENTESISABRE expresionBinaria PARENTESISCIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionBinaria ::= operando operadorBinario operando operadorBinario operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionBinaria ::= operando operadorBinario operando operadorBinario expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operadorBinario ::= DIVI 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operadorBinario ::= TIMES 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadorBinario ::= POWER 
            {
              Object RESULT =null;
		 RESULT = "**"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operadorBinario ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "~"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionConjuntiva ::= operando operadorConjuntiva operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConjuntiva",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadorConjuntiva ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadorConjuntiva ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorConjuntiva",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operando ::= literal 
            {
              Object RESULT =null;
		int vLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operando ::= Identificador 
            {
              Object RESULT =null;
		int vIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String vI = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    if (existeVar(vI.toString(), listaTablasSimbolos.get(tablaActual))) RESULT = vI;
    else { 
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        RESULT = "";
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operando ::= funcion 
            {
              Object RESULT =null;
		int vResleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vResright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vRes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vRes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipoFuncion ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipoFuncion ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipoFuncion ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoFuncion",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipoVariable ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipoVariable ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipoVariable ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipoVariable ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // literal ::= L_ENTERO 
            {
              Object RESULT =null;
		int l_Eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_E = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_E; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // literal ::= L_FLOTANTE 
            {
              Object RESULT =null;
		int l_Fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Number l_F = (java.lang.Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_F; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // literal ::= L_BOOLEANO 
            {
              Object RESULT =null;
		int l_Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l_B = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int l_Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l_C = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int l_Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l_Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l_S = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l_S; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
