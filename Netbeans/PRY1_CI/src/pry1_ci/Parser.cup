package pry1_ci;

import java_cup.runtime.*;

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Math;
import pry1_ci.VerificadorTipos;
   

action code {:
    LexerAS scanner;
    
   
    HashMap<String, HashMap<String, String>> listaTablasSimbolos = new HashMap<String, HashMap<String, String>>();
    String tablaActual;
    ArrayList<String> llamadasFunciones = new ArrayList<String>();
    VerificadorTipos verificador = new VerificadorTipos();
    String codigoBuffer;
    FileWriter escribir;
    String rutaCodigo = "src/pry1_ci/codigoIntermedio.txt";
    int t = 0;
    int l = 0;
    int param = 0;
   

    public void escribirCodigo(String cadenas) throws FileNotFoundException, IOException{
        escribir = new FileWriter(rutaCodigo, true);
        escribir.write(cadenas);
        escribir.close();
    }
    

    // Funcion para impresion de tabla de simbolos
    public void imprimirTabla() {
       
        System.out.println("[#----------------------Impresion de Tabla de Simbolos----------------------#]\n");
        
        for (String i : listaTablasSimbolos.keySet()) {
            System.out.println(i);
            HashMap<String, String> temp = listaTablasSimbolos.get(i);
            for (String j:temp.keySet()) {
                System.out.println("\t\t| Nombre simbolo:"+j+"\t Tipo simbolo:"+temp.get(j));
            }
        }
        System.out.println("\n[#----------------------Fin Tabla de Simbolos----------------------#]");
    }
    
    // Funcion para verificar si existe una variable en la funcion
    public boolean existeVar(String valor, HashMap<String, String> tablaValores) {
        for (String i: tablaValores.keySet()) {
            if (i.equals(valor)) return true;
        }
        return false;
    }
    

    public boolean revisarLlamadas() {
        int cont = 0;
        for (String i:llamadasFunciones) {
            for (String j:listaTablasSimbolos.keySet()) {
                String nombreLlamada = "Tabla:"+i;
                if (nombreLlamada.equals(j)) {                   
                    cont++;
                }
            }
        }
        if (cont != llamadasFunciones.size()) return false;
        else return true;    
    }
    
    public boolean existeMain() {
        for (String i:listaTablasSimbolos.keySet()) {
            if (i.equals("Tabla:main")) return true;
        }
        return false;
    }

    public boolean existeFuncion(String nombre) {
        String nombreFuncion = "Tabla:"+nombre;
        for (String i:listaTablasSimbolos.keySet()) {   
            if (nombreFuncion.equals(i)) return true;
        }
        return false;
    }

:}

parser code  {: 
    public LexerAS scanner;
    public parser(LexerAS scanner) {
        super(scanner);
        this.scanner = scanner;
    }
     int banderaErrores = 0;

    // Funcion para reportar errores sintacticos
    public void report_error(String message, Object info) {
        String m = "Error sintactico ";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m+="en la linea "+(s.left+1)+" -> ";
            }
            m+="["+message+"]";
            System.err.println(m);
        }
        else {
            System.err.println("Error [SINTAXIS DESCONOCIDA]");
        }
        banderaErrores = 1;
        
    }

    // Funcion para reportar errores fatales
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

    public int getBanderaErrores() {
        return banderaErrores;
    }
  
 
:};


init with {: action_obj.scanner = scanner;:};


// Terminales
terminal MAIN;
terminal FIN_EXPRESION;
terminal IF, ELSE, ELIF, WHILE, DO, FOR, BREAK, RETURN;
terminal BOOL, CHAR, FLOAT, INT, STRING;

// Entrada y salida estandar
terminal SYS_PRINT, SYS_READ;

// Operadores
terminal EQEQ, PLUS, EQ, TIMES, MINUS, DIVI, NOT_EQ, POWER, MODULO;
terminal NEGACION, CONJUNCION, DISYUNCION, MINUSMINUS, PLUSPLUS, GREATER_THAN, LESS_THAN;
terminal GREATER_THAN_OR_EQ, LESS_THAN_OR_EQ;

// Parentesis
terminal PARENTESISABRE, PARENTESISCIERRA, LLAVESCORCHETEABRE, LLAVESCORCHETECIERRA, COMA;
terminal LLAVESCUADABRE, LLAVESCUADCIERRA, SEMI;

// Literales
terminal java.lang.Number L_ENTERO;
terminal java.lang.Number L_FLOTANTE;
terminal java.lang.Boolean L_BOOLEANO;
terminal java.lang.Character L_CHAR;
terminal java.lang.String STRING_LITERAL;

// Identificador
terminal java.lang.String Identificador;

// No terminales

// Estructura del programa
non terminal inicio, funMain, programa, bloqueCod, return, bloqueControl;

// Funciones
non terminal crearFuncion, funcion, funciones, parametro, crearParametro, tipoIDFun;

// Sentencias
non terminal sentencia, crearVariable, crearAsignarVariable, asignarVariable;
// obtenerDatoString, asignarElementoString;
non terminal entradaEst, salidaEst;

// Estructuras de control
non terminal estructControl, if, elif, else, while, do, for, condicion, break;

// Expresiones
non terminal expresion, operando;
non terminal expresionBinaria, expresionUnaria, expresionRelacion, expresionNegacion, expresionConjuntiva, expresionFor;
non terminal operadorNegacion, operadorBinario, operadorRelacional, operadorUnario, operadorComparacion, operadorConjuntiva;

// Tipos
non terminal literal;
non terminal arreglo, elementoArreglo, crearArreglo, asignarElementoArreglo, obtenerDatoArreglo;
non terminal tipoVariable, tipoFuncion;




/* Precedencia */
precedence left PLUS, MINUS;
precedence left EQEQ, NOT_EQ;
precedence left GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQ, LESS_THAN_OR_EQ;
precedence left TIMES, DIVI, MODULO;
precedence left POWER;
precedence left CONJUNCION;
precedence left DISYUNCION;
precedence left IF, ELIF, ELSE;
precedence left LLAVESCORCHETEABRE, LLAVESCORCHETECIERRA, PARENTESISABRE, PARENTESISCIERRA;
precedence left FIN_EXPRESION;
precedence left INT;


//PRODUCCION DE INICIO
start with inicio;

//-------------------------------------------------------- [INICIO] ----------------------------------------------------|
inicio ::= programa {:
    if(!existeMain()) {
        System.err.println("Error semantico [INEXISTENCIA DE FUNCION PRINCIPAL MAIN]");
        banderaErrores = 1;
    }
    if (!revisarLlamadas()) {
        System.err.println("Error semantico -> llamadas a funciones no declaradas");
        banderaErrores = 1;
    }
    Thread.sleep(500);
    imprimirTabla();
:};
programa ::= funciones      
;
//-------------------------------------------------------- [FUNCIONES] ----------------------------------------------------|
funciones ::= crearFuncion funciones
            | crearFuncion
;

//funMain ::= INT MAIN PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA
//{:
//    RESULT = "main";
//:}
//;

//-------------------------------------------------------- [BLOQUECOD] ----------------------------------------------------|
bloqueCod ::= sentencia 
            | estructControl 
            | return FIN_EXPRESION
            | sentencia bloqueCod
            | estructControl bloqueCod
            | error {: System.err.println("Error sintactico en la linea "+scanner.getYYLine()) ; banderaErrores = 1;:} FIN_EXPRESION 
;   


//-------------------------------------------------------- [SENTENCIA] ----------------------------------------------------|
sentencia ::= crearVariable FIN_EXPRESION 
            | crearAsignarVariable FIN_EXPRESION
            | asignarVariable FIN_EXPRESION
            | crearArreglo FIN_EXPRESION //resolver a nivel semantico
            | asignarElementoArreglo FIN_EXPRESION
            | obtenerDatoArreglo FIN_EXPRESION
            | expresion FIN_EXPRESION
            | funcion FIN_EXPRESION
            | entradaEst:vET FIN_EXPRESION
            | salidaEst FIN_EXPRESION
            | error  FIN_EXPRESION {: System.err.println("Error sintactico en la linea "+scanner.getYYLine()); banderaErrores = 1;:}
          
          
;

//-------------------------------------------------------- [CREAR VARIABLE] ----------------------------------------------------|
crearVariable ::= tipoVariable:vTV Identificador:vID 
                   {:
                        String tipo = vTV.toString();
                        String ID = vID.toString();
                        if (existeVar(ID, listaTablasSimbolos.get(tablaActual))) {
                            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE VARIABLE] -> "+ID);
                            banderaErrores = 1;
                        }

                        listaTablasSimbolos.get(tablaActual).put(ID, tipo);
                        RESULT = vID;
                        escribirCodigo("data"+vTV.toString()+" "+vID.toString()+"\n");
                        
                    :}

;


//-------------------------------------------------------- [CREAR ASIGNAR VARIABLES] ----------------------------------------------------|
crearAsignarVariable ::= crearVariable:vID EQ literal:vL 
{:
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vL.toString();
    
    if (!verificador.opciones(tipo, valor, vL)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        banderaErrores = 1;
    }

    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 :}
                       | crearVariable:vID EQ expresion:vEX
{:
//  GENERACION DE CODIGO INTERMEDIO
    escribirCodigo(vID.toString()+" = t"+(t-1)+"\n");
//
:}

                       | crearVariable:vID EQ Identificador:vI // CREACION Y ASIGNACION DE VARIABLE = VARIABLE
{:
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID).toString();
    String valor = vI.toString();
    if (!existeVar(valor, listaTablasSimbolos.get(tablaActual))) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        banderaErrores = 1;
    }

    else if (!(listaTablasSimbolos.get(tablaActual).get(valor)).equals(tipo)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
        banderaErrores = 1;
    }

//  GENERACION DE CODIGO INTERMEDIO
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vI.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
//
:}
                       | crearVariable:vID EQ funcion:vF // CREACION Y ASIGNACION DE VARIABLE = FUNCION
{:
    String temp = "t"+t;
    t++;
    escribirCodigo(temp+" = call "+vF.toString()+","+param+"\n");
    escribirCodigo(vID.toString()+" = "+temp+"\n");
    param = 0;
:}
                       | crearVariable FIN_EXPRESION
;


//-------------------------------------------------------- [ASIGNAR VARIABLES] ----------------------------------------------------|
asignarVariable	::= Identificador:vID EQ literal:vL 
{: if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
       System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
       banderaErrores = 1;
    }
    else {
        String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());

        String tipoL = "";
        if (verificador.verificarEntero(vL)) tipoL = "int";
        if (verificador.verificarBooleano(vL)) tipoL = "bool";
        if (verificador.verificarFloat(vL)) tipoL = "float";
        if (verificador.verificarChar(vL)) tipoL = "char";
        if (verificador.verificarString(vL)) tipoL = "string";


        if (!tipo.equals(tipoL)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
            banderaErrores = 1;
        }
    }
    String msg = vID.toString()+" = "+vL.toString()+"\n";
    escribirCodigo(msg);
 :} // FIN DE CODIGO

                  | Identificador EQ expresion 
                  | Identificador:vIL EQ Identificador:vIR
{:
    if (existeVar(vIL.toString(), listaTablasSimbolos.get(tablaActual)) && existeVar(vIR.toString(), listaTablasSimbolos.get(tablaActual))) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(vIL.toString());
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(vIR.toString());
        if (!tipo1.equals(tipo2)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE VARIABLE INVALIDA]");
            banderaErrores = 1;
        }
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        banderaErrores = 1;
    }
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vIL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vIR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
:} // FIN DE CODIGO

                  | Identificador:vID EQ funcion:vF
{:
    String temp = "t"+t;
    t++;
    escribirCodigo(temp+" = call "+vF.toString()+","+param+"\n");
    escribirCodigo(vID.toString()+" = "+temp+"\n");
    param = 0;
:}
;

//-------------------------------------------------------------- [CREAR ARREGLOS] -----------------------------------------------|
crearArreglo ::= crearVariable:vID arreglo:vAR
{:
    String tipo = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipo.equals("int") && !tipo.equals("char")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ARREGLO ILEGAL]");
        banderaErrores = 1;
    }
    String msg = vID.toString()+vAR.toString()+" = {}\n";
    escribirCodigo(msg);
:}

;

//-------------------------------------------- [PRODUCCION DE ARREGLOS] ----------------------------------------------------|
arreglo ::= LLAVESCUADABRE literal:vL LLAVESCUADCIERRA
{:
    RESULT = "["+vL.toString()+"]";
:}
;


//-------------------------------------------- [ASIGNAR ELEMENTO A UN ARREGLO] ---------------------------------------------|
asignarElementoArreglo	::= elementoArreglo:vEL  EQ literal:vL
{:
    if (verificador.verificarEntero(vL)  || verificador.verificarChar(vL)) {
        String temp1 ="t"+t;
        String var1 = " = "+vL.toString()+"\n";
        escribirCodigo(temp1+var1);
        String msg = vEL.toString()+" = "+temp1+"\n";
        escribirCodigo(msg);
        t++;
    }
    else {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [ASIGNACION DE ARREGLO ILEGAL]");
        banderaErrores = 1;
    } 
:}
                          | elementoArreglo EQ expresionBinaria
                          | elementoArreglo EQ funcion
;

//----------------------------------------- [ESPECIFICACION DE ELEMENTO DE UN ARREGLO] -------------------------------------|
elementoArreglo	::= Identificador:vID LLAVESCUADABRE L_ENTERO:vE LLAVESCUADCIERRA 
{: 
    RESULT = vID.toString()+"["+vE.toString()+"]";
:}
                  | Identificador:vID LLAVESCUADABRE Identificador:vID2 LLAVESCUADCIERRA
{: 
    RESULT = vID.toString()+"["+vID2.toString()+"]";
:}
;

//-------------------------------------------- [OBTENER EL DATO DE UN ARREGLO] ---------------------------------------------|
obtenerDatoArreglo ::= Identificador LLAVESCUADABRE L_ENTERO LLAVESCUADCIERRA
                     | Identificador LLAVESCUADABRE Identificador LLAVESCUADCIERRA
;


// -----------------------------------------------[PRODUCCION DE FUNCIONES]-------------------------------------------------|
funcion	::= Identificador:vID PARENTESISABRE PARENTESISCIERRA 
{:
    llamadasFunciones.add(vID.toString());
:} 
          | Identificador:vID PARENTESISABRE parametro PARENTESISCIERRA 
{:
    RESULT = vID;
    llamadasFunciones.add(vID.toString());
    
:} 
;

//-------------------------------------------------------- [CREAR FUNCION] ----------------------------------------------------|
crearFuncion ::= tipoIDFun:vID PARENTESISABRE PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA
{:
    escribirCodigo(vID.toString()+"_end\n");
:}
               //| tipoIDFun PARENTESISABRE Identificador PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA 
               | tipoIDFun PARENTESISABRE literal  PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA
               | tipoIDFun:vID PARENTESISABRE crearParametro  PARENTESISCIERRA LLAVESCORCHETEABRE bloqueCod LLAVESCORCHETECIERRA
{:
    escribirCodigo(vID.toString()+"_end\n");
:}
;

//-------------------------------------------------------- [TIPO Y ID DE FUNCION] ----------------------------------------------------|
tipoIDFun ::= tipoFuncion:vTF Identificador:vID 
{:
    if (existeFuncion(vID.toString())) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [REPETICION DE FUNCION]");
        banderaErrores = 1;
    }
    tablaActual = "Tabla:"+vID.toString(); 
    HashMap<String, String> datosFuncion = new HashMap<String, String>();
    datosFuncion.put(tablaActual, vTF.toString());

    //System.out.println(listaTablasSimbolos);
    listaTablasSimbolos.put(tablaActual, datosFuncion);

    String msg = vID.toString()+":\n";
    escribirCodigo(msg);
    RESULT = vID;
    
    
:}
;
// -----------------------------------------------------------------------------------------------------------------------|


// -----------------------------------------------[PRODUCCION DE PARAMETROS]----------------------------------------------|
parametro ::= Identificador:vID
{: 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+", no existe la variable -> "+vID.toString());
        banderaErrores = 1;
    }
    RESULT = vID;
    param++;
:}
            | literal:vL 
{:
    param++;
    String temps ="t"+t;
    String vars1 = temps+" = "+vL.toString()+"\n";
    escribirCodigo(vars1);
    escribirCodigo("param "+temps+"\n");
    t++;
    RESULT = vL; 
:}
            | funcion:vF {: RESULT = vF; :}
            | Identificador:vID {: RESULT = vID; :} COMA parametro
            | literal COMA parametro
            | funcion COMA parametro
            | expresion
{:
    
    escribirCodigo("param t"+(t-1)+"\n");
    param++;
:}
;

crearParametro ::= crearVariable:vID 
{:
    escribirCodigo("param "+vID.toString()+"\n");
:}
                 | crearVariable COMA crearParametro
;

//-------------------------------------------------------- [ENTRADA ESTANDAR] ----------------------------------------------------|
entradaEst ::= SYS_READ PARENTESISABRE Identificador:vID PARENTESISCIERRA 
{:
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("int") && !tipoID.equals("float")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [*SYSREAD ERROR* VARIABLE ILEGAL (ENTERO O FLOTANTE)]");
        banderaErrores = 1;
    }
:}
;

//-------------------------------------------------------- [SALIDA ESTANDAR] ----------------------------------------------------|
salidaEst ::= SYS_PRINT PARENTESISABRE Identificador:vID PARENTESISCIERRA

{:
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        banderaErrores = 1;
    }
    String tipoID = listaTablasSimbolos.get(tablaActual).get(vID.toString());
    if (!tipoID.equals("string") && !tipoID.equals("int") && !tipoID.equals("float")) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");
        banderaErrores = 1;
    }
    escribirCodigo("print "+vID.toString()+"\n");

:}
 
            | SYS_PRINT PARENTESISABRE literal:vL PARENTESISCIERRA
{:
    if (!verificador.verificarEntero(vL) && !verificador.verificarFloat(vL) && !verificador.verificarString(vL)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [IMPRESION ILEGAL]");
        banderaErrores = 1;
    }
    escribirCodigo("print t"+t+"\n");
:}
;

//-------------------------------------------------------- [ESTRUCTURAS DE CONTROL] ----------------------------------------------|
estructControl ::= if 
                | elif 
                | else 
                | while
                | do FIN_EXPRESION
                | for
                | error 
{: 
System.err.println("Error sintactico en la linea "+scanner.getYYLine());
banderaErrores = 1;
:} sentencia              
;

//-------------------------------------------------------- [IF] ----------------------------------------------------|
if ::= IF PARENTESISABRE condicion:vCon PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
{:
    escribirCodigo("if_end"+l+":\n");
    l++;
:}
      | IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA elif
      | IF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA {:escribirCodigo("if_end"+l+":\n");l++;:} ELSE else
      | error LLAVESCORCHETECIERRA

;

//-------------------------------------------------------- [ELIF] ----------------------------------------------------|
elif ::= if ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
       | ELIF PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
;
//-------------------------------------------------------- [ELSE] ----------------------------------------------------|
else ::= LLAVESCORCHETEABRE {: escribirCodigo("else_"+(l-1)+":\n"); :} bloqueCod LLAVESCORCHETECIERRA
{:
    escribirCodigo("else_end"+(l-1)+"\n");
:}
       | elif ELSE LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA

;

//-------------------------------------------------------- [WHILE] ----------------------------------------------------|
while ::= WHILE PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA;

//-------------------------------------------------------- [DO] ----------------------------------------------------|
do ::= DO LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA WHILE PARENTESISABRE condicion PARENTESISCIERRA;

//-------------------------------------------------------- [FOR] ----------------------------------------------------|
for ::= FOR PARENTESISABRE condicion PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
      | FOR PARENTESISABRE L_BOOLEANO PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
      | FOR PARENTESISABRE expresionConjuntiva PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
      | FOR PARENTESISABRE expresionFor PARENTESISCIERRA LLAVESCORCHETEABRE bloqueControl LLAVESCORCHETECIERRA
;

//-------------------------------------------------------- [EXPRESION FOR] ----------------------------------------------------|
expresionFor::= crearAsignarVariable FIN_EXPRESION expresionRelacion FIN_EXPRESION expresionUnaria;

//-------------------------------------------------------- [BLOQUE DE CONTROL] ----------------------------------------------------|
bloqueControl ::= {:escribirCodigo("L"+l+":\n");:} bloqueCod {:escribirCodigo("L"+l+"_end\n");:}

                | break
;

//-------------------------------------------------------- [BREAK] ----------------------------------------------------|
break ::= BREAK FIN_EXPRESION;

//-------------------------------------------------------- [RETURN] ----------------------------------------------------|
return ::= RETURN literal:vL
{:
    String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
    String tipoL = "";
    if (verificador.verificarEntero(vL)) tipoL = "int";
    if (verificador.verificarBooleano(vL)) tipoL = "bool";
    if (verificador.verificarFloat(vL)) tipoL = "float";
    if (verificador.verificarChar(vL)) tipoL = "char";
    if (verificador.verificarString(vL)) tipoL = "string";
    System.out.println(tipoL);
    if (!tipoF.equals(tipoL)) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
        banderaErrores = 1;
    }
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vL.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");
:}

         | RETURN expresion
         | RETURN Identificador:vID
{: 
    if (!existeVar(vID.toString(), listaTablasSimbolos.get(tablaActual))) {
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
        banderaErrores = 1;
    }
    else {
        String tipoV = listaTablasSimbolos.get(tablaActual).get(vID.toString());
        String tipoF = listaTablasSimbolos.get(tablaActual).get(tablaActual);
        if (!tipoV.equals(tipoF)) {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [RETURN ILEGAL]");
            banderaErrores = 1;
        }
    }
    String temp1 = "t"+t;
    t++;
    String var1 = temp1+" = "+vID.toString()+"\n";
    escribirCodigo(var1);
    escribirCodigo("return "+temp1+"\n");
:}

         | RETURN funcion
;

//-------------------------------------------------------- [CONDICION] ----------------------------------------------------|
condicion ::= L_BOOLEANO:vBO {: RESULT = vBO.toString(); :}
            | expresion:vEX 
{: 
    String temp1 = "L"+l;
    String tempActual = "t"+(t-1);
    String msg = "if "+tempActual+" goto "+temp1+"\n";
    escribirCodigo(msg);
    escribirCodigo("goto if_end"+l+"\n");
    RESULT = vEX.toString(); 
:}
            | expresion:vEX operadorConjuntiva:vOC condicion:vC {: RESULT = vEX.toString()+vOC.toString()+vC.toString(); :}
;

//----------------------------------------------------[PRODUCCION DE EXPRESIONES]--------------------------------------------|
expresion ::= expresionBinaria:vRes 
            | expresionRelacion:vER {: RESULT = vER.toString(); :}
            | expresionNegacion:vEN {: RESULT = vEN.toString(); :} 
            | expresionConjuntiva
            | expresionBinaria operadorRelacional literal
;

//------------------------------------------ [EXPRESIONES RELACIONALES (<><=>=!=)] -----------------------------------------------|
expresionRelacion ::= operando:vOPL operadorRelacional:vOR operando:vOPR {:
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    if(verificador.verificarString(vOPL)) {
        if (existeVar(op1, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op1);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
                banderaErrores = 1;
            }
            
        }
        else {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            banderaErrores = 1;
        }
        
    } 
    else if (verificador.verificarString(vOPR)) {
        if (existeVar(op2, listaTablasSimbolos.get(tablaActual))) {
            String tipo = listaTablasSimbolos.get(tablaActual).get(op2);
            if ((!tipo.equals("int") && !tipo.equals("float"))) {
                System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
                banderaErrores = 1;
            }
        
        }
        else {
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            banderaErrores = 1;
        }
    }
    else {
        if (!verificador.verificarEntero(vOPL) || !verificador.verificarBooleano(vOPL) && !verificador.verificarEntero(vOPR) || !verificador.verificarBooleano(vOPR)) { 
            System.err.println("Error semantico en la linea  "+scanner.getYYLine()+ " [OPERACION RELACIONAL INVALIDA]");
            banderaErrores = 1;
        }
    }
    String temp1 = "t"+t;
    t++;
    escribirCodigo(temp1+" = "+op1+"\n");
    String temp2 = "t"+t;
    t++;
    escribirCodigo(temp2+" = "+op2+"\n");
    String temp3 = "t"+t;
    t++;
    escribirCodigo(temp3+" = "+temp1+" "+vOR.toString()+" "+temp2+"\n");
    
    RESULT = op1+vOR.toString()+op2;
    
                
:}
                    | PARENTESISABRE expresionRelacion PARENTESISCIERRA
                    | expresionRelacion:vER operadorConjuntiva:vOC operando:vOP 
{:  
    RESULT = vER.toString()+vOC.toString()+vOP.toString();
:}
                    | expresionRelacion:vER operadorConjuntiva:vOC expresionRelacion:vER2
{:
    RESULT = vER.toString()+vOC.toString()+vER2.toString();
:}
                    | operando:vOPL operadorComparacion:vOC operando:vOPR
{:
    RESULT = vOPL.toString()+vOC.toString()+vOPR.toString();
:}
;

//-------------------------------------------------------- [OPERADOR RELACIONAL] ----------------------------------------------------|
operadorRelacional ::= GREATER_THAN {: RESULT = ">"; :}
                     | LESS_THAN {: RESULT = "<"; :}
                     | GREATER_THAN_OR_EQ {: RESULT = ">="; :}
                     | LESS_THAN_OR_EQ {: RESULT = "<="; :}
;

//-------------------------------------------------------- [OPERADOR COMPARACION] ----------------------------------------------------|
operadorComparacion	::= EQEQ {: RESULT = "=="; :}
                      | NOT_EQ {: RESULT = "!="; :}
;

//-------------------------------------------------------- [EXPRESION NEGACION !] ----------------------------------------------------|
expresionNegacion ::= operadorNegacion:vOPN operando:vOP
{:
    RESULT = vOPN.toString()+vOP.toString();
:}
;

//-------------------------------------------------------- [OPERADOR NEGACION] ----------------------------------------------------|
operadorNegacion ::= NEGACION {: RESULT = "!"; :}
;

//-------------------------------------------------------- [EXPRESIONES UNARIAS ++ --] ----------------------------------------------|
expresionUnaria	::= Identificador:vID operadorUnario {: RESULT = vID.toString(); :}
                  | literal:vL operadorUnario {: RESULT = vL; :}
                  | operadorUnario Identificador:vID {: RESULT = vID.toString(); :}
                  | operadorUnario literal:vL {: RESULT = vL; :}
;

//-------------------------------------------------------- [OPERADOR UNARIO] ----------------------------------------------------|
operadorUnario	::= MINUSMINUS {: RESULT = "--"; :}
                  | PLUSPLUS {: RESULT = "++"; :}
;

//-------------------------------------------------------- [EXPRESION BINARIO] ----------------------------------------------------|
expresionBinaria ::= operando:vOPL operadorBinario:vOB operando:vOPR
{:
    String op1 = vOPL.toString();
    String op2 = vOPR.toString();
    String op3 = vOB.toString();
 
    if (verificador.verificarString(vOPL) && verificador.verificarString(vOPR)) {
        String tipo1 = listaTablasSimbolos.get(tablaActual).get(op1);
        String tipo2 = listaTablasSimbolos.get(tablaActual).get(op2);
        if (tipo1.equals(tipo2)) {
            String temp1 = "t"+t;
            t++;
            escribirCodigo(temp1+" = "+op1+"\n");

            String temp2 = "t"+t;
            t++;
            escribirCodigo(temp2+" = "+op2+"\n");

            String temp3 = "t"+t;
            t++;
            escribirCodigo(temp3+" = "+temp1+" "+vOB.toString()+" "+temp2+"\n");
        }
        else {
            System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
            banderaErrores = 1;
        }
        RESULT = "0";
    }
    else if (verificador.verificarString(vOPL)) {
        String tipo="";
        if (!verificador.verificarString(vOPR)) {
            if (verificador.verificarEntero(vOPR)) tipo = "int";
            if (verificador.verificarFloat(vOPR)) tipo = "float";
            if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                banderaErrores = 1;
            }
            String temp1 = "t"+t;
            t++;
            escribirCodigo(temp1+" = "+op1+"\n");
            String temp2 = "t"+t;
            t++;
            escribirCodigo(temp2+" = "+temp1+" "+vOB.toString()+" "+op2+"\n");
        }
        if (verificador.verificarString(vOPR)) {
            
            if (!verificador.verificarString(vOPL)) {
                if (verificador.verificarEntero(vOPR)) tipo = "int";
                if (verificador.verificarFloat(vOPL)) tipo = "float";
                if(!(listaTablasSimbolos.get(tablaActual).get(op1)).equals(tipo)) {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [OPERACION ILEGAL]");
                    banderaErrores = 1;
                }
                String temp1 = "t"+t;
                t++;
                escribirCodigo(temp1+" = "+op2+"\n");
                String temp2 = "t"+t;
                t++;
                escribirCodigo(temp2+" = "+op1+" "+vOB.toString()+" "+temp1+"\n");
            }

        }
        RESULT = "0";
    }

    if (verificador.verificarEntero(vOPL) && verificador.verificarEntero(vOPR)) {
        int e1 = Integer.parseInt(op1);

        int e2 = Integer.parseInt(op2);
        if (op3.equals("+")) {
     
                String temps ="t"+t;
                String vars1 = temps+" = "+op1+"\n";
                escribirCodigo(vars1);
                t++;
                String temps2 ="t"+t;
                String vars2 = temps2+" = "+op2+"\n";
                escribirCodigo(vars2);
                t++;
                String temps3 ="t"+t;
                escribirCodigo(temps3+" = "+temps+" + "+temps2+"\n");
                t++;
                RESULT = e1+e2;
        }
        if (op3.equals("-")) {
            
                String tempm1 ="t"+t;
                String varm1 = tempm1+" = "+op1+"\n";
                escribirCodigo(varm1);
                t++;
                String tempm2 ="t"+t;
                String varm2 = tempm2+" = "+op2+"\n";
                escribirCodigo(varm2);
                t++;
                String tempm3 ="t"+t;
                escribirCodigo(tempm3+" = "+tempm1+" - "+tempm2+"\n");
                t++;
                RESULT = e1-e2;
          
        }
        if (op3.equals("*")) {
            String temps ="t"+t;
            String vars1 = temps+" = "+op1+"\n";
            escribirCodigo(vars1);
            t++;
            String temps2 ="t"+t;
            String vars2 = temps2+" = "+op2+"\n";
            escribirCodigo(vars2);
            t++;
            String temps3 ="t"+t;
            escribirCodigo(temps3+" = "+temps+" * "+temps2+"\n");
            t++;
            RESULT = e1*e2;
        }
        if (op3.equals("/")) {
                if (e2 != 0) {
                    String temps ="t"+t;
                    String vars1 = temps+" = "+op1+"\n";
                    escribirCodigo(vars1);
                    t++;
                    String temps2 ="t"+t;
                    String vars2 = temps2+" = "+op2+"\n";
                    escribirCodigo(vars2);
                    t++;
                    String temps3 ="t"+t;
                    escribirCodigo(temps3+" = "+temps+" / "+temps2+"\n");
                    t++;
                    RESULT = e1/e2;
                }
                else {
                    System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                    banderaErrores = 1;
                    RESULT = "0";
                }
        }
        
                
        if (op3.equals("**")) {
            String temps ="t"+t;
            String vars1 = temps+" = "+op1+"\n";
            escribirCodigo(vars1);
            t++;
            String temps2 ="t"+t;
            String vars2 = temps2+" = "+op2+"\n";
            escribirCodigo(vars2);
            t++;
            String temps3 ="t"+t;
            escribirCodigo(temps3+" = "+temps+" ** "+temps2+"\n");
            t++;
            RESULT = Math.pow(e1,e2);
        }
        if (op3.equals("%")){
            String temps ="t"+t;
            String vars1 = temps+" = "+op1+"\n";
            escribirCodigo(vars1);
            t++;
            String temps2 ="t"+t;
            String vars2 = temps2+" = "+op2+"\n";
            escribirCodigo(vars2);
            t++;
            String temps3 ="t"+t;
            escribirCodigo(temps3+" = "+temps+" % "+temps2+"\n");
            t++;
                RESULT = e1%e2;
        }
        
    }

    else {
        if (verificador.verificarFloat(vOPL) && verificador.verificarFloat(vOPR)) {

            float e1 =  Float.parseFloat(op1);
            float e2 =  Float.parseFloat(op2);
            switch(op3) {
                case "+":
                    RESULT = e1+e2;
                case "-":
                    RESULT = e1-e2;
                case "*":
                    RESULT = e1*e2;
                case "/":
                    if (e2 != 0) {
                        RESULT = e1/e2;
                    }
                    else {
                        System.err.println("Error semantico en la linea "+scanner.getYYLine()+ " [OPERACION ILEGAL]");
                        banderaErrores = 1;
                        RESULT = "0";
                    }
                case "**":
                    RESULT = e1+e2;
                case "~":
                    RESULT = e1%e2;
                default:
                    break;
            }
    
        }
    }
  /*      
    String temp1 ="t"+t;
    String var1 = temp1+" = "+vOPL.toString()+"\n";
    escribirCodigo(var1);
    t++;
    String temp2 ="t"+t;
    String var2 = temp2+" = "+vOPR.toString()+"\n";
    escribirCodigo(var2);
    escribirCodigo(temp1+" = "+temp2+"\n");
    t++;
*/
    
:}
        | PARENTESISABRE expresionBinaria PARENTESISCIERRA
        //| operando operadorBinario operando  operadorBinario operando 
        //| operando operadorBinario operando  operadorBinario expresionBinaria
        | expresionBinaria operadorBinario operando
        | expresionBinaria operadorBinario expresionBinaria
;

//-------------------------------------------------------- [OPERADOR BINARIO] ----------------------------------------------------|
operadorBinario ::= PLUS {: RESULT = "+"; :}
                  | MINUS {: RESULT = "-"; :}
                  | DIVI {: RESULT = "/"; :}
                  | TIMES {: RESULT = "*"; :}
                  | POWER {: RESULT = "**"; :}
                  | MODULO {: RESULT = "~"; :}
;

//-------------------------------------------------------- [EXPRESION CONJUNTIVA] ----------------------------------------------------|
expresionConjuntiva ::= operando:vOP operadorConjuntiva:vOC operando:vOP2
{:  
    RESULT = vOP.toString()+vOC.toString()+vOP2.toString();
:}
;

//-------------------------------------------------------- [OPERADOR CONJUNTIVA] ----------------------------------------------------|
operadorConjuntiva ::= CONJUNCION {: RESULT = "^"; :}
                          | DISYUNCION {: RESULT = "#"; :}
;

//-------------------------------------------------------- [OPERANDO] ----------------------------------------------------|
operando ::= literal:vL {: RESULT = vL; :} 
           | Identificador:vI
{: 
    if (existeVar(vI.toString(), listaTablasSimbolos.get(tablaActual))) RESULT = vI;
    else { 
        System.err.println("Error semantico en la linea "+scanner.getYYLine()+" [NO EXISTE LA VARIABLE]");
        banderaErrores = 1;
        RESULT = vI.toString();
    }
:} 
           | funcion:vRes {: RESULT = vRes; :}
           | expresionUnaria:vEU {: RESULT = vEU; :}
           | elementoArreglo:vEA {: RESULT = vEA; :}
;
//--------------------------------------------------------------------------------------------------------------------------|

//-------------------------------------------------------- [TIPO FUNCION] ----------------------------------------------------|
tipoFuncion ::=  INT {: RESULT = "int"; :}
               | BOOL {: RESULT = "boolean"; :}
               | FLOAT {: RESULT = "float"; :}
;

//-------------------------------------------------------- [TIPO VARIABLES] ----------------------------------------------------|
tipoVariable ::= INT {: RESULT = "int"; :} 
               | BOOL {: RESULT = "boolean"; :} 
               | FLOAT {: RESULT = "float"; :} 
               | CHAR {: RESULT = "char"; :} 
               | STRING:s {: RESULT = "string"; :} 
;

//-------------------------------------------------------- [LITERALES] ----------------------------------------------------|
literal ::= L_ENTERO:l_E {: RESULT = l_E; :}
          | L_FLOTANTE:l_F {: RESULT = l_F; :}
          | L_BOOLEANO:l_B {: RESULT = l_B; :}
          | L_CHAR:l_C {: RESULT = l_C; :}
          | STRING_LITERAL:l_S {: RESULT = l_S; :}
;


